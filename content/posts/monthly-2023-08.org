#+TITLE: 月读（2023年8月）
#+DATE: <2023-08-16 Wed 19:02>
#+TAGS[]: 他山之石

写这篇的目的：记录这个月读到的文字。

{{< monthly "浏览器是如何实现 CSS 滤镜的？兼谈如何使用 govips 实现同样的滤镜效果 - WebP Cloud Services Blog" "https://blog.webp.se/govips-filter-zh/" >}}
{{< /monthly >}}
{{< monthly "Lynn Conway's Story" "https://ai.eecs.umich.edu/people/conway/LynnsStory-Chinese.html" >}}
这则故事讲述了一位对社会有着杰出贡献的女性，为了成为她自己而置强烈的排斥和污名化于不顾，以及她如何通过取得秘密新身份并生活在“潜藏模式”里而做到这一切。
{{< /monthly >}}
{{< monthly "完美主义 - Miao Yu | 于淼" "https://yufree.cn/cn/2023/07/28/perfectionism/" >}}
这对高学历人士尤其如此，为了找寻各种意义上的优越感，他们通常会形成一些毫无道理的预期，既然见过了好的长啥样，就再也回不去了。而绝大多数人又达不到那种最高水平，所以他们会一直活在充实的人生目标追求战里。
{{< /monthly >}}
{{< monthly "IBM, Red Hat and Free Software: An old maddog’s view - Linux Professional Institute (LPI)" "https://www.lpi.org/blog/2023/07/30/ibm-red-hat-and-free-software-an-old-maddogs-view/" >}}
Linux内核项目行得通的六个因素：

- 来自GNU、MIT、BSD等组织的众多独立软件
- 互联网上充斥着关于操作系统内部的信息
- 高速互联网正在普及
- 当时，市场上不仅有低成本、功能强大且能按需分页虚拟内存的处理器，而且这些处理器正在被功能更强大的系统所取代，因此可以用来构建 "业余 "内核
- 运气和机遇并存
- 一个独一无二的固执的项目领导者

{{< /monthly >}}
{{< monthly "在 linux 上使用 clash 订阅" "https://hsingko.pages.dev/post/2021/07/05/how-to-use-clash-subscribe/" >}}
{{< /monthly >}}
{{< monthly "第一集：以谁之名？｜Episode 1: In Whose Name? - YouTube" "https://www.youtube.com/watch?v=X4otYJGByic" >}}
纪录片《陌生人》by柴静
{{< /monthly >}}
{{< monthly "EXCLUSIVE: Naomi Wu and the Silence That Speaks Volumes" "https://www.hackingbutlegal.com/p/naomi-wu-and-the-silence-that-speaks-volumes" >}}
了不起的一位女性——Naomi Wu

在这个视频 https://www.youtube.com/watch?v=Z9vW_MpXTfs 里她讲述了自己的故事——在16岁以前是被当作男孩养的，16岁时因为远离原来的社会关系，得以让自己成为“真正的女孩”。

外表不仅仅是给别人看的，而且是表达自己观点的证明。用这种形体来表达自己的性别认同。
{{< /monthly >}}
{{< monthly "外国小哥关于驼背的分享" "https://twitter.com/Erwin_AI/status/1692460767189295484?s=20" >}}
一段锻炼背部肌肉的视频 https://www.youtube.com/watch?v=tSvmWU-0Zo0
{{< /monthly >}}
{{< monthly "How to Communicate When Trust Is Low (Without Digging Yourself Into A Deeper Hole) – charity.wtf" "https://charity.wtf/2023/08/17/how-to-communicate-when-trust-is-low-without-digging-yourself-into-a-deeper-hole/" >}}
当信任度低时如何进行沟通（而不是让自己陷入更深的困境）？

小心沟通

刻意曲解别人的意思很容易。但是，只有沟通才能推动工作进行。

重建信任的方式是通过小而积极的互动。

- 事先承认这是困难的
- 事后说明，先前的表述并不知道是否恰当
- 谨慎地说话
- 尽量友好一些
- 深呼吸，如果情绪起伏很大，告诉对方自己需要几分钟平复心情
- 传达积极的意图
- 给人们做得更好的机会
- 记住文本沟通的不足，珍惜为表达自己付出的努力
{{< /monthly >}}
{{< monthly "How to Read: Lots of Inputs and a Strong Filter · Collab Fund" "https://collabfund.com/blog/how-to-read-lots-of-inputs-and-a-strong-filter/" >}}
如何阅读：大量输入及强大的过滤器

尽可能读更多书但只读每本书中感兴趣的部分。

如果不接触大量信息，我就会被困在自己经历的小世界里。但如果没有一个强大的过滤器，我就会被选择所淹没。

#+BEGIN_QUOTE
A good reading filter is more art than science. You’ll have to find one that works for you. The bigger point is that the highest odds of finding the right piece of information comes from inundating yourself with information but very quickly being able to say, "that ain't it."
#+END_QUOTE
{{< /monthly >}}
{{< monthly "write for one person" "https://wizardzines.com/comics/write-for-one-person/" >}}
只为一个人写作，让这个人（目前是自己）理解我写的内容。
{{< /monthly >}}
{{< monthly "Proof You Can Do Hard Things - Nat Eliason's Newsletter" "https://blog.nateliason.com/p/proof-you-can-do-hard-things" >}}
你需要养成的一个好习惯，就是强迫自己去做困难的事情。随着你做的事情越来越困难，你会逐渐建立起对自己能力的自信。
{{< /monthly >}}
{{< monthly  >}}
（1）优秀的软件工程师不仅编写代码，还会考虑谁将使用它、为什么使用它、如何使用它。牢记用户需求才能创造良好的用户体验。

（2）水平再高的程序员，也会在自己擅长的领域犯错，如果遇到复杂的问题，就更是如此了。始终牢记，最好的代码是没有代码，或者不需要维护的代码。

（3）任何软件工程师的主要工作都是交付价值。软件只是达到目的的手段。

（4）警惕那些很长时间没有编写任何代码、却在设计系统的人。

（5）Bjarne Stroustrup 有一句名言："只有两种计算机语言：人们抱怨的语言和没人使用的语言"。大型系统也是如此，每个系统最终都很糟糕。

因此，不要太在意代码的优雅和完美，而要持续改进，创建一个可用的系统，让开发者喜欢在其中工作并可以提供价值。

（6）10倍程序员是一个愚蠢的神话。我只见过程序员将代码规模增加了10倍，最终结果是你必须修复10倍的bug。

真正要做的不是找到神话中的10倍程序员，而是要避免出现0.1倍程序员。那些浪费时间、不寻求反馈、不测试代码、不考虑边缘情况等的程序员，必须保证让这样的人远离我们的团队。

（7）人们说他们想要创新，但实际上，他们想要通常的只是某种新颖性和业务成功。如果你的创新改变了人们做事的方式，大多数情况下会得到负面反馈。如果你相信你正在做的事情，并知道它真的会改善事情，那么就准备好迎接一场持久战吧。

（8）数据是系统中最重要的部分。数据可能会比你的代码寿命更长，保持数据的有序和清洁，避免脏数据，从长远来看，会得到很好的回报。

（9）一直存在的旧技术不是恐龙，而是鲨鱼。它们很好地解决了问题，所以一直活到了现在，没有被快速变化的技术浪潮淘汰。

不要轻易押注新技术，只有在充分理由的情况下才替换正在发挥作用的旧技术。那些老式的技术工具不花哨，也不令人兴奋，但它们可以完成工作，不会给你带来很多个不眠之夜。

（10）很多软件工程师除非被问到，否则不会发表意见。不要因为有人没当面发表意见，而认为他们没什么要补充的。有时，会议上嗓门最高的人是我最不想听的人。

（11）如果将人们与他们的工作成果分开，他们就会不太关心他们的工作。软件工程师和所有人一样，需要有主人翁的感觉，从头到尾拥有整个流程，直接负责交付价值。

让一群充满激情的人完全拥有设计、构建和交付软件的所有权，令人惊奇的事情就会发生。

（12）面试最好用于了解某人是谁，以及他们对特定专业领域的兴趣程度，对于试图弄清楚他们是否将成为一个优秀的团队成员，那是徒劳的。

（13）始终努力构建一个更小的系统。

有很多原因会推动你，去构建一个比原先设想的更大的系统，人类似乎有一种提供更多功能的欲望。你应该抵制这种欲望，在满足设计目标的前提下，始终努力构建一个更小的系统，这样你最终会得到一个比最初设计更好的系统。
{{< /monthly >}}
