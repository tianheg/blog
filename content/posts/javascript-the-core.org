#+TITLE: JavaScript. The Core.(2010)
#+DATE: <2023-01-14 Sat 08:09>
#+TAGS[]: 技术 JavaScript

[[http://dmitrysoshnikov.com/ecmascript/javascript-the-core/][JavaScript. The Core. – Dmitry Soshnikov]]

[[https://xcoder.in/2021/05/14/javascript-ao/][JavaScript 中的活跃对象（AO）浅谈及导读 · 一个伪宅级别的码畜。]]

作者讲述了十个 JavaScript 的重要部分：

1. 对象
2. 原型链
3. 构造器
4. 执行上下文栈
5. 执行上下文
6. 变量对象
7. 活跃对象
8. 作用域链
9. 闭包
10. ~this~ 值

* 对象

ECMAScript 是一种高度抽象的面向对象语言，它与对象打交道。虽然也有原始类型，但它们可以在需要的时候转化为对象。

一个对象就是一个属性集合加上一个单一原型对象。这个原型可能是对象或 ~null~ 值。

一个对象的原型可以在内部的 ~[[Prototype]]~ 属性中找到。但是，在之后的文字图片中，会使用 ~__<internel-property>__~ 下划线标记，而不是双中括号，特别是对于原型对象来说： ~__proto__~ 。

针对下述代码：

#+BEGIN_SRC js
var foo = {
  x: 10,
  y: 20
};
#+END_SRC

该对象有两个显式自有属性，和一个隐式属性，该隐式属性是对 ~foo~ 原型的引用。

#+BEGIN_EXPORT html
<img src="/images/javascript-the-core-0.svg" alt="图片1：有原型的基本对象">
<span class="caption">◎ 图片1：有原型的基本对象</span>
#+END_EXPORT

检查对象是否为空：

#+BEGIN_SRC js
function isEmpty(obj) {
  for (let prop in obj) {
    return false
  }
  return true
}
#+END_SRC

将对象属性加在一起：

#+BEGIN_SRC js
var salaries = {
  John: 100,
  Ann: 160,
  Pete: 130
}

function sumSalaries(obj) {
  if (isEmpty(obj)) return 0
  let sum = 0
  for (let key in obj) {
    sum += obj[key]
  }
  return sum
}

function isEmpty(obj) {
  for (let key in obj) {
    return false
  }
  return true
}
sumSalaries(salaries)
#+END_SRC

对值为数字的键进行乘法运算：

#+BEGIN_SRC js
var menu = {
  width: 200,
  height: 300,
  title: "My menu"
}

function multiplyNumeric(obj) {
  for (let key in obj) {
    if (typeof obj[key] === "number") {
      obj[key] *= 2
    }
  }
}

multiplyNumeric(menu)
menu
#+END_SRC

如果函数写成：

#+BEGIN_SRC js
function multiplyNumeric(obj) {
  for (let key in obj) {
    if (typeof obj[key] !== "number") {}
    obj[key] = obj[key] * 2
  }
}
#+END_SRC

最终经过处理的 menu 对象的 title 属性就变成 NaN。
