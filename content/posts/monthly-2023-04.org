#+TITLE: 月读（2023年4月）
#+DATE: <2023-04-01 Sat 09:59>
#+TAGS[]: 他山之石

{{< monthly "Back to Basics in Production with Marc Grabanski - Software Unscripted" "https://open.spotify.com/episode/3BypKRz30vSFC3XKlwEmNz" >}}
- 注重编程基础，只用基础的语言层面的东西写自己需要的功能。而非框架等高水平的抽象工具
- FM 官网前端用的是纯 JS、后端用的 Go
- 思考如何用最少的代码实现需要的功能，只关注问题
- 只使用语言本身去解决问题，即便解决不了，也更好地理解了问题。之后再选择合适的工具
{{< /monthly >}}
{{< monthly "AI狂飙的时代，人还有价值吗？ - 不合时宜 | 小宇宙" "https://www.xiaoyuzhoufm.com/episode/641d59168aca9099d7312077" >}}
文本：[[https://mp.weixin.qq.com/s/7H1FrwbQvsh0HD9z90L0wg][AI狂飙的时代，人还有价值吗？]]

- 提升自己的灵活性

{{< /monthly >}}
{{< monthly "【大白话系列 #3】大白话聊 ChatGPT（Sarah & 王建硕） - Traders' Talk | 小宇宙" "https://www.xiaoyuzhoufm.com/episode/641183b5bb1fc0cb68f810c6" >}}
文本：[[https://d58hixvcd6.feishu.cn/docx/HfMEds7Z1ov37wxqM19czTBinWg][2023/3/6 大白话聊 ChatGPT 直播逐字稿（Sarah & 王建硕） - Feishu Docs]]

- Pre-training, fine tuning
- GPT: 之前是 Generative Pre Training，后来改为 Generative Pre-trained Transformer
- Transformer 的两大部分：encoder/decoder
- AIGC: AI Generated Content
- chatGPT 有没有人格？没有
{{< /monthly >}}
{{< monthly "The Age of AI has begun | Bill Gates" "https://www.gatesnotes.com/The-Age-of-AI-Has-Begun" >}}
#+BEGIN_QUOTE
Artificial intelligence is as revolutionary as mobile phones and the Internet.
#+END_QUOTE

盖茨提及一些人工智能可以解决的问题：削弱全球不平等问题

- 改善美国教育，提升数学能力
- 全球气候变化

* 定义人工智能

#+BEGIN_QUOTE
AI: Artificial intelligence refers to a model created to solve a specific problem or provide a particular service.

AGI: Artificial general intelligence refers to software that’s capable of learning any task or subject.
#+END_QUOTE

* 提高生产力

通过完成一些简单重复的工作，提升人们的工作效率。人工智能将全方面接管个人日常琐事的处理。

生产力的提高可以将人们从琐碎的事务中释放出来，并有精力完成过去没有时间完成的事情。

* 健康

AI能帮助医疗工作者处理文书工作，节省时间。

AI还能在人类医生无法到达的地方，为当地人们提供医学指导。

* 教育

AI驱动的教学软件将改变人们的学习方式。

* 人工智能的风险和问题
{{< /monthly >}}
{{< monthly "涌现" "https://mp.weixin.qq.com/s/cFQBqjKEnqnT6NMUMRZN9A" >}}
[[https://mp.weixin.qq.com/s/Xn4cyugIrcBRN8VgJ6bIxg][涌现（续）]]

大语言模型（大神经网络）的两个研究方向预示着通用智能的可能性——思维链条（chain of thought, CoT）；自发性地结构涌现（英文文献里的简称 emergence）。

传统的大神经网络是标注的快思考模式。而人除了有快思考模式，还有慢思考（逐步推理）模式。

只要神经网络的复杂性和训练样本的多样性都超过一个规模，就会有抽象的推理结构在神经网络里突然自发涌现出来。这个过程像所有的复杂性系统一样是非线性的。

AI 的 CoT 能力基本上就是在 GPT3 和 GPT3.5 这两个版本之间的某处诞生的。

同样在过去两年内出现的一个新的热词是 Grokking，中文可能可以翻译成「顿悟」，它描述了这样一种现象：一个高度复杂的神经网络在漫长的训练期内一直只能记住训练样本的信息，几乎没有泛化能力，但到了某一刻，它的泛化水平忽然跳了出来，而且非常完美。你可以想象成一个神经网络经历了一个「aha moment」，像是内部的某个齿轮忽然对上了一样。我的理解是 CoT 也可以看做是一种 Grokking。

在一种很粗糙的意义上说，大语言模型的外部属性（也就是用户可以直接感知和评估的属性）可以分解为「知识基础」+「推理能力」+「表达能力」这三个层面。大多数关于 ChatGPT 的讨论把目光集中在第一项和第三项，忽视了第二项的革命性进展。当人们热衷于吐槽它的知识基础（比如竟然不知道某件事或者完全弄错了某个事实）的时候，多少有点 miss the point。事实上你完全可以想象未来的 AI 被分拆成模块，知识引擎被单独拿出来处理（让一个语言模型记住大量明明可以快速检索到的知识是没有意义的），而推理与表达才是它的能力重点。这种解耦也会大大加快模型的运算效率。

说到模块解耦，甚至还有一个更有趣的例子，来自 UCSB 的 Wenhu Chen 最近的一篇论文 Program of Thoughts Prompting。他们觉得让 AI 通过 CoT 生成结果甚至都有些绕远了。应该让 AI 把原问题直接转化为程序代码，然后调用外部的代码运行模块来得出答案。这等于是把「计算」这一块也从语言模型中间剥离了出去。
{{< /monthly >}}
{{< monthly "An Uber-like Content Delivery Network | by Anton Lakhtikov | Medium" "https://medium.com/@anton.lakhtikov/uber-like-model-to-disrupt-the-cdn-industry-8d870362f0f6" >}}
和传统CDN的解决方案不同
{{< /monthly >}}
{{< monthly "Repeat yourself, do more than one thing, and... — programming is terrible" "https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and" >}}
- Repeat yourself to find abstractions
- Gather responsibilities to simplify interactions between them
- Modularity is more than reducing things to their smallest parts
- Modularity is about limiting the options for growth
- Rewrite Everything
- null is true, everything is permitted
{{< /monthly >}}
{{< monthly "Reduce server response times (TTFB) - Chrome Developers" "https://developer.chrome.com/docs/lighthouse/performance/time-to-first-byte/" >}}
如何缩短服务器响应时间？
- 优化服务器的应用逻辑
- 优化服务器查询数据库的方式，或者迁移到更快的数据库系统
- 升级服务器硬件
{{< /monthly >}}
{{< monthly "Learning with ChatGPT | Globant Blog" "https://stayrelevant.globant.com/en/technology/scalable-platforms/learning-with-chatgpt/" >}}
不应用ChatGPT编写复杂代码
{{< /monthly >}}
{{< monthly "Rendering on the Web" "https://web.dev/rendering-on-the-web/" >}}
广泛意义上讲，作者推荐服务端渲染或静态渲染，而非完全重新生成。

为了更好地理解我们在做这个决定时要选择的架构，我们需要对每种方法有一个扎实的了解，并在谈论它们时使用一致的术语。这些方法之间的差异有助于通过性能的角度来说明网络渲染的权衡问题。

* 术语

Rendering

- SSR: Server-Side Rendering - 在服务器上将客户端或通用应用程序渲染成HTML。
- CSR: Client-Side Rendering - 在浏览器中渲染应用，通常使用DOM。
- Rehydration: 在客户端启动JavaScript视图，使其重新使用服务器渲染的HTML的DOM树和数据。
- Prerendering: 在构建时运行客户端应用，将其初始状态捕捉为静态HTML。

Performance

- TTFB: Time to First Byte - 被视为从点击链接到显示第一bit内容的时间。
- FP: First Paint - 任何像素第一次对用户可见。
- FCP: First Contentful Paint - 请求的内容变得可见的时间。
- TTI: Time To Interactive - 页面达到可交互状态需要的时间。

* 服务端渲染

服务器渲染通常能产生快速的首次绘制（FP）和首次内容绘制（FCP）。在服务器上运行页面逻辑和渲染，可以避免向客户端发送大量的JavaScript，这有助于实现快速的交互时间（TTI）。

有了服务器渲染，用户就不可能在使用你的网站之前等待占用CPU的JavaScript的处理了。即使不能避免第三方JS，使用服务器渲染来减少你自己的第一方JS成本，也可以为其他方面提供更多的 "预算"。然而，这种方法有一个主要缺点：在服务器上生成页面需要时间，这往往会导致第一字节时间（TTFB）变慢。

究竟使用服务端渲染还是客户端渲染，不能只看它们两个的区别，还要看具体的应用场景。有些时候，需要混合使用。

很多现代的框架、库和架构让同时将应用渲染在客户端和服务端成为可能。

这些技术可以用于服务器端渲染，但需要注意的是，既在服务器端又在客户端上进行渲染的架构是一类具有非常不同性能特征和权衡的解决方案。

React 用户可以用 [[https://react.dev/reference/react-dom/server][Server React DOM APIs]] 或者基于 React 的 Next.js 框架实现服务端渲染。Vue 相关[[https://vuejs.org/guide/scaling-up/ssr.html][文档]]，以及基于 Vue 的 [[https://nuxt.com/][Nuxt.js]] 框架。

* 静态渲染

静态渲染发生在构建状态，提供快速的首次绘制（FP）、首次内容绘制（FCP）和可交互（TTI）——假设客户端 JS 是有限的。

与服务器端渲染不同，静态渲染还可以实现始终如一的快速首字节时间，因为页面的 HTML 不必实时生成。一般而言，静态渲染意味着预先为每个 URL 生成单独的 HTML 文件。由于 HTML 响应是预先生成的，静态渲染可以部署到多个 CDN 上，以利用边缘缓存的优势。

静态渲染的一个缺点是必须为每个可能的 URL 生成单独的 HTML 文件。当你无法预测这些 URL 时，或者对于具有大量唯一页面的站点而言，这可能是具有挑战性甚至不可行的。

理解静态渲染和预渲染的不同：

#+BEGIN_QUOTE
Static rendered pages are interactive without the need to execute much client-side JS, whereas prerendering improves the First Paint or First Contentful Paint of a Single Page Application that must be booted on the client in order for pages to be truly interactive.
#+END_QUOTE

一个判断网站是静态渲染还是预渲染的办法：关闭JS，如果大部分功能还在，就是静态渲染；反之则是预渲染。

还有种办法：通过开发者工具里的选项，降低网速，预渲染需要加载更多的 JS 使得网站变得具备可交互性。

* 客户端渲染

客户端渲染（CSR）是指直接使用 JS 在浏览器端渲染页面。全部逻辑、数据获取、模板和路由都在客户端处理，而不是在服务端处理。

#+BEGIN_EXPORT html
<img src="/images/monthly-2023-04.avif" alt="各种渲染方式对比列表">
<span class="caption">◎ 各种渲染方式对比列表</span>
#+END_EXPORT

图片版权归 Web.Dev 编者团队，本人仅学习使用
{{< /monthly >}}
