* tech-learn-way-intro-to-prog
:PROPERTIES:
:CUSTOM_ID: tech-learn-way-intro-to-prog
:END:
[[https://ebookfoundation.github.io/free-programming-books/books/free-programming-books-zh.html#%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF]]

[[https://www.kancloud.cn/kancloud/intro-to-prog/52592]]

沉醉于编程，编程更是为了兴趣。兴趣是推动力的不竭源泉，保持这种充满兴趣的感觉，以便于你能将其投入到你的 10 年/10000 小时的编程时间中。编程很有趣，那是探索的喜悦。那是创造的喜悦。看到自己亲手完成的作品显示在屏幕上很有趣。有人为你的代码而惊叹很有趣。有人在公共场合称赞你的产品、邻居使用你的产品、以及在媒体上讨论你的产品很有趣。编程应该十分有趣，若并非如此，就找出导致编程无趣的问题，然后解决之。

此后我不再仅仅追求怎么做 (How)，我开始问为什么 (why)，开始回过头来，拾起那些最基础的部分，学习那些我之前我本该好好学的知识。这个回头的过程是痛苦的，希望你们能就此警醒，永远不要做这种傻事。

在编程领域，学生过于注重整体，而忽略最细微、最为基础的部分。举例，想做一个机器人，但是对背后的

理解物理模型-->理解电子工程基础-->理解伺服系统与传感器-->让机器人动起来

这一过程完全提不起兴趣。

在这里对初学者有两点问题需要注意：

如果初学者们只与预先构建好的「发动机和组件」接触（没有理解和思考它们构造的原理），这会严重限制他们在将来构建这些东西的能力，并且在诊断解决问题时无从下手。

第二个坑没有第一个那么明显：幼稚的「整体论」方法有些时候会显得很有效，这有一定的隐蔽性与误导性，但是一两年过后（也许没那么长），当你在学习路上走远时，再想回过头来「补足基础」会有巨大的心理障碍，你得抛弃之前自己狭隘的观念，耐心地缓步前进，这比你初学时学习基础知识困难得多。

编程是连接理论与实践的纽带，是计算机科学与计算机应用技术相交融的领域。正确的编程学习方法应该是：通过自顶而下的探索与项目实践，获得编程直觉与推动力；从自底向上的打基础过程中，获得最重要的通用方法并巩固编程思想的理解。

作为初学者，应以后者为主，前者为辅。

​## 编程启蒙

编程知识的金字塔底部有三个关键的部分：

- 算法思想：例如怎样找出一组数中最大的那个数？首先你得有一个 maxSoFar 变量，之后对于每个数...
- 语法：我怎样用某种编程语言表达这些算法，让计算机能够理解。
- 系统基础：为什么 while(1) 时线程永远无法结束？为什么 int \*foo() { int x = 0; return &x; } 是不可行的？

启蒙阶段的初学者若选择 C 语言作为第一门语言会很困难并且枯燥，这是因为他们被迫要同时学习这三个部分，在能做出东西前要花费很多时间。

因此，为了尽量最小化「语法」与「系统基础」这两部分，建议使用 Python 作为学习的第一门语言，虽然 Python 对初学者很友好，但这并不意味着它只是一个「玩具」，在大型项目中你也能见到它强大而灵活的身影。熟悉 Python 后，学习 C 语言是便是一个不错的选择了：学习 C 语言会帮助你以靠近底层的视角思考问题，并且在后期帮助你理解操作系统层级的一些原理，如果你只想成为一个普通（平庸）的开发者你可以不学习它。

一些可供参考的索引：

1. 完成 Learn Python The Hard Way（"笨办法"学 Python（第 3 版））
2. 完成 MIT 计算机导论课（如果你英语不过关：麻省理工学院公开课：计算机科学及编程导论）。MOOC  是学习编程的一个有效途径。虽然该课程的教学语言为 Python，但作为一门优秀的导论课，它强调学习计算机科学领域里的重要概念和范式，而不仅仅是教你特定的语言。如果你不是科班生，这能让你在自学时开阔眼界；课程内容：计算概念，python 编程语言，一些简单的数据结构与算法，测试与调试。支线任务：完成《Python 核心编程》
3. 完成 Harvard CS50（如果你英语不过关：完成哈佛大学公开课：计算机科学 cs50 。同样是导论课，但这门课与 MIT 的导论课互补。教学语言涉及 C, PHP, JavaScript + SQL, HTML + CSS，内容的广度与深度十分合理，还能够了解到最新的一些科技成果，可以很好激发学习计算机的兴趣。支线任务：

- 阅读《编码的奥秘》
- 完成《C 语言编程》
- [可选] 如果你的目标是成为一名 Hacker：阅读 Hacker's Delight

​## 入门

结束启蒙阶段后，初学者积累了一定的代码量，对编程也有了一定的了解。这时你可能想去学一门具体的技术，诸如 Web 开发，Android 开发，iOS 开发什么的，你可以去尝试做一些尽可能简单的东西，给自己一些正反馈，补充自己的推动力。但**记住别深入，这些技术有无数的细节，将来会有时间去学习**；**同样的，这时候也别过于深入特定的框架和语言，现在是学习计算机科学通用基础知识的时候，不要试图去抄近路直接学你现在想学的东西，这是注定会失败的**。

入门阶段应该思考**自己曾经写过的程序为什么是那样设计，怎样写出更好的程序？试图探寻理解编程的本质：利用计算机解决问题**。

​****编程能力 = F(X, Y) （X>Y）****

X = 用于思考解决方案的时间，即「解决问题」 部分

Y = 用于实现代码的时间，即「利用计算机」部分」

要想提高编程能力，就得优化 X，Y 与函数 F(X, Y)，很少有书的内容能同时着重集中在这三点上，但有一本书做到了------[Structure and Interpretation of Computer Programs]([[https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html#%_toc_start]])(SICP)《计算机程序的构造和解释》，它为你指明了这三个变量的方向。在阅读 SICP 之前，你也许能通过调用几个函数解决一个简单问题。但阅读完 SICP 之后，你会学会如何将问题抽象并且分解，从而处理更复杂更庞大的问题，这是编程能力巨大的飞跃，这会在本质上改变你思考问题以及用代码解决问题的方式。此外，SICP 的教学语言为 Scheme，可以让你初步了解函数式编程。更重要的是，他的语法十分简单，你可以很快学会它，从而把更多的时间用于学习书中的编程思想以及复杂问题的解决之道上。

Peter Norvig 曾经写过一篇非常精彩的 SICP 书评，其中有这样一段：

> To use an analogy, if SICP were about automobiles, it would be for the person who wants to know how cars work, how they are built, and how one might design fuel-efficient, safe, reliable vehicles for the 21st century. The people who hate SICP are the ones who just want to know how to drive their car on the highway, just like everyone else.

如果你是文中的前者，阅读 SICP 将成为你衔接启蒙与入门阶段的关键点。

虽然 SICP 是一本「入门书」，但对于初学者还是有一定的难度，以下是一些十分有用的辅助资源：

- How to Design Programs, Second Edition：HtDP 的起点比 SICP 低，书中的内容循循善诱，对初学者很友好，如果觉得完成 SICP 过于困难，可以考虑先读一读 HtDP。
- UC Berkeley SICP 授课视频以及 SICP 的两位作者给 Hewlett-Packard 公司员工培训时的录像([中文化项目]([[https://github.com/DeathKing/Learning-SICP/]]))
- [[http://composingprograms.com/]] 一个继承了 SICP 思想但使用 Python 作为教学语言的编程导论（其中包含了一些小项目）
- [[https://sicp.readthedocs.io/en/latest/]] 对于书后的习题，作为初学者应尽力并量力完成。

完成了这部分学习后，你会逐步建立起一个自己的程序设计模型，你的脑子里不再是一团乱麻，你会意识到记住库和语法并不会教你如何解决编程问题，接下来要学些什么，在你心里也会明朗了很多。这时候才是真正开始进行项目实践，补充推动力的好时机。关于项目实践：对于入门阶段的初学者，参与开源项目还为时过早，这时候应该开始一些简单的项目，诸如搭建一个网站并维护它，或是编写一个小游戏再不断进行扩展，如果你自己的想法不明确，可以从  [Mega Project List]([[https://github.com/karan/Projects/]]) 中选取项目。总之，务必在这时拿下你项目实践的第一滴血。

如果你觉得 SICP 就是搞不定，也不要强迫自己，先跳过，继续走常规路线：开始读 The Elements of Computing System s 吧，它会教会你从最基本的 Nand 门开始构建计算机，直到俄罗斯方块在你的计算机上顺利运行。具体内容不多说了，这本书会贯穿你的整个编程入门阶段，你入门阶段的目标就是坚持完成这本书的所有项目（包括一个最简的编译器与操作系统）。

为了完全搞定这本书，为了继续打好根基。为了将来的厚积薄发，在下面这几个方面你还要做足功课（注意：**下面的内容没有绝对意义上的先后顺序**）：

​## 计算机系统基础

有了之前程序设计的基础后，想更加深入地把握计算机科学的脉络，不妨看看这本书：《深入理解计算机系统》 Computer Systems A Programmer's Perspective。这里点名批评这本书的中译名，其实根本谈不上什么深入啦，这本书只是 CMU 的「计算机系统导论」的教材而已。CMU 的计算机科学专业相对较偏软件，该书就是从一个程序员的视角观察计算机系统，以「程序在计算机中如何执行」为主线，全面阐述计算机系统内部实现的诸多细节。

如果你看书觉得有些枯燥的话，可以跟一门 Coursera 上的 MOOC: The Hardware/Software Interface，这门课的内容是 CSAPP 的一个子集，但是最经典的[实验部分]([[http://csapp.cs.cmu.edu/public/labs.html)都移植过来了。同时，可以看看]] The C Programming Language，回顾一下 C 语言的知识。

完成这本书后，你会具备坚实的系统基础，也具有了学习操作系统，编译器，计算机网络等内容的先决条件。当学习更高级的系统内容时，翻阅一下此书的相应章节，同时编程实现其中的例子，一定会对书本上的理论具有更加感性的认识，真正做到经手的代码，从上层设计到底层实现都了然于胸，并能在脑中回放数据在网络->内存->缓存->CPU 的流向。

此外，也是时候去接触 UNIX 哲学了：KISS - Keep it Simple, Stupid. 在实践中，这意味着你要开始熟悉命令行界面，配置文件。并且在开发中逐渐脱离之前使用的 IDE，学会使用 Vim 或 Emacs（或者最好两者都去尝试）。

- 阅读《UNIX 编程环境》
- 阅读《UNIX 编程艺术》
- [折腾你的  UN\*X  系统]([[https://heather.cs.ucdavis.edu/~matloff/unix.html]])

​## 数据结构与算法基础

如今，很多人认为编程（特别是做 web 开发）的主要部分就是使用别人的代码，能够用清晰简明的方式表达自己的想法比掌握硬核的数学与算法技巧重要的多，数据结构排序函数二分搜索这不都内置了吗？工作中永远用不到，学算法有啥用啊？这种扛着实用主义大旗的「码农」思想当然不可取。没有扎实的理论背景，遭遇瓶颈是迟早的事。

数据结构和算法是配套的，入门阶段你应该掌握的主要内容应该是：这个问题用什么算法和数据结构能更快解决。这就要求你对常见的数据结构和算法了熟于心，你不一定要敲代码，用纸手写流程是更快的方式。对你不懂的数据结构和算法，你要去搜它主要拿来干嘛的，使用场景是什么。

供你参考的学习资源：

- 《算法导论》：有人说别把这本书当入门书，这本书本来就不是入门书嘛，虽说书名是 Introduction to Algorithms，这只不过是因为作者不想把这本书与其他书搞重名罢了。当然，也不是没办法拿此书入门，读第一遍的时候跳过习题和证明就行了嘛，如果还觉得心虚先看看这本《[数据结构与算法分析]([[https://book.douban.com/subject/1139426/]])》
- Coursera Algorithms: Design and Analysis [Part 1] & [Part 2]： Stanford 开的算法课，不限定语言，两个部分跟下来算法基础基本就有了；英语没过关的：麻省理工学院公开课：算法导论
- 入门阶段还要注意培养使用常规算法解决小规模问题的能力，结合前文的 SICP 部分可以读读这几本书：《编程珠玑》，《程序设计实践》

​## 编程语言基础

此外还要知道，学习第 n 门编程语言的难度是第 (n-1) 门的一半，所以尽量去尝试不同的编程语言与编程范式，若你跟寻了前文的指引，你已经接触了：「干净」的脚本语言 Python, 传统的命令式语言 C, 以及浪漫的函数式语言 Scheme/Racket 三个好朋友。但仅仅是接触远远不够，你还需要不断继续加深与他们的友谊，并尝试结交新朋友，美而雅的  Ruby  小姑娘，Hindley-Milner 语言家族的掌中宝  Haskell  都是不错的选择。但有这么一位你躲不开的，必须得认识的大伙伴 --- C++，你得做好与他深交的准备：

- 入门：C++ Primer
- [可选] 进阶：
  - 高效使用：Effective C++
  - 深入了解：《深度探索 C++对象模型》；C++Templates
  - 研究反思：The Design and Evolution of C++ ；对于 C++这个  Necessary Evil ，看这本书可以让你选择是成为守夜人还是守日人。

现实是残酷的，在软件工程领域仍旧充斥着一些狂热者，他们只掌握着一种编程语言，也只想掌握一种语言，他们认为自己掌握的这门语言是最好的，其他异端都是傻 X。这种人也不是无药可救，有一种很简单的治疗方法：让他们写一个编译器。要想真正理解编程语言，你必须亲自实现一个。现在是入门阶段，不要求你去上一门编译器课程，但要求你能至少实现一个简单的解释器。

供你参考的学习资源：

- 《程序设计语言-实践之路》：CMU 编程语言原理的教材，程序语言入门书，现在就可以看，会极大扩展你的眼界，拉开你与普通人的差距。
- Coursera 编程语言 MOOC：课堂上你能接触到极端 FP（函数式）的 SML，中性偏 FP 的 Racket，以及极端 OOP（面向对象）的 Ruby，并学会问题的 FP 分解 vs OOP 分解、ML 的模式匹配、Lisp 宏、不变性与可变性、解释器的实现原理等，让你在将来学习新语言时更加轻松并写出更好的程序。
- Udacity CS262 Programming Language：热热身，教你写一个简单的浏览器------其实就是一个 javascript 和 html 的解释器，完成后的成品还是很有趣的；接下来，试着完成一个之前在 SICP 部分提到过的项目：用 Python 写一个  Scheme Interpreter

​## 其他

编程入门阶段比较容易忽视的几点：

1. 学好英语：英语是你获取高质量学习资源的主要工具，但在入门阶段，所看的那些翻译书信息损耗也没那么严重，以你自己情况权衡吧。此外英语的重要性更体现在沟通交流上，Linus Torvalds 一个芬兰人，一口流利的英语一直是他招募开发者为 Linux 干活的的法宝，这是你的榜样。
2. 学会提问：学习中肯定会遇到问题，首先应该学会搜索引擎的「[高级搜索]([[https://support.google.com/websearch/answer/35890?hl=zh-Hans]])」，当单靠检索无法解决问题时，去 Stack Overflow  或知乎   提问，提问前读读这篇文章：What have you tried?
3. 不要做一匹独狼：尝试搭建一个像这样简单的个人网站，不要只是一个孤零零的 About 页面，去学习  Markdown  与  LaTeX，试着在 Blog 上记录自己的想法，并订阅自己喜欢的编程类博客。推荐几个供你参考：Joel on Software,[Peter Norvig]([[http://www.norvig.com/index.html]]), Coding Horror

以上的内容你不应该感到惧怕，编程的入门不是几个星期就能完成的小项目。期间你还会遇到无数的困难，当你碰壁时试着尝试「费曼」技巧：

Step 1. Choose the concept you want to understand. Take a blank piece of paper and write that concept at the top of the page.

Step 2. Pretend you're teaching the idea to someone else. Write out an explanation of the topic, as if you were trying to teach it to a new student. When you explain the idea this way you get a better idea of what you understand and where you might have some gaps.

Step 3. If you get stuck, go back to the book. Whenever you get stuck, go back to the source material and re-learn that part of the material until you get it enough that you can explain it on paper.

Step 4. Simplify your language. The goal is to use your words, not the words of the source material. If your explanation is wordy or confusing, that's an indication that you might not understand the idea as well as you thought -- try to simplify the language or create an analogy to better understand it

将难点分而化之，切成小知识块，再逐个对付，之后通过向别人清楚地解说来检验自己是否真的理解。当然，依旧会有你解决不了的问题，这时候不要强迫自己------很多时候当你之后回过头来再看这个问题时，一切豁然开朗。

此外不要局限于上文提到的那些材料，还有一些值得在入门阶段以及将来的提升阶段反复阅读的书籍。这里不得不提到在  stackoverflow   上票选得出的程序员必读书单中，排在前两位的两本书：

Code Complete：不管是对于经验丰富的程序员还是对于那些没有受过太多的正规训练的新手程序员，此书都能用来填补自己的知识缺陷。对于入门阶段的新手们，可以重点看看涉及变量名，测试，个人性格的章节。

The Pragmatic Programmer：程序员入门书，终极书。有人称这本书为代码小全：从  DRY  到  KISS，从做人到做程序员，这本书教给了你一切，你所需的只是遵循书上的指导。
