* Proxy
:PROPERTIES:
:CUSTOM_ID: proxy
:END:
** Concept
:PROPERTIES:
:CUSTOM_ID: concept
:END:
*** PAC(proxy auto-config)
:PROPERTIES:
:CUSTOM_ID: pacproxy-auto-config
:END:
[[https://en.wikipedia.org/wiki/Proxy_auto-config]] 根据给定访问地址，自动选择代理服务器

** Set up a proxy for these software
:PROPERTIES:
:CUSTOM_ID: set-up-a-proxy-for-these-software
:END:
*** Shell
:PROPERTIES:
:CUSTOM_ID: shell
:END:
#+begin_src sh
export http_proxy=http://127.0.0.1:1080
export https_proxy=http://127.0.0.1:1080

export http_proxy_user=user
export http_proxy_pass=pass

export https_proxy_user=user
export https_proxy_pass=pass
#+end_src

*** pip
:PROPERTIES:
:CUSTOM_ID: pip
:END:
=~/.config/pip/pip.conf=

#+begin_example
[global]
proxy=http://localhost:1087
#+end_example

注意不支持socks5

refer [[https://pip.pypa.io/en/stable/user_guide/#using-a-proxy-server]]

*** Git
:PROPERTIES:
:CUSTOM_ID: git
:END:
1. Clone with ssh

   在文件 =~/.ssh/config= 后添加下面两行：

   #+begin_src sh
   Host github.com
   # Mac下
   ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p
   # Linux下
   ProxyCommand nc --proxy-type socks5 --proxy 127.0.0.1:1080 %h %p
   #+end_src

   注意 Linux 和 Mac 下 ncat/netcat 区别，详见 [[https://unix.stackexchange.com/q/368155]]

2. Clone with http

   #+begin_src sh
   git config --global http.proxy http://127.0.0.1:1087
   #+end_src

   建议使用 http，因为 Socks5 在使用 git-lfs 时会报错 =proxyconnect tcp: dial tcp: lookup socks5: no such host=

   refer [[https://gist.github.com/laispace/666dd7b27e9116faece6]]

*** cargo
:PROPERTIES:
:CUSTOM_ID: cargo
:END:
Cargo 会依次检查以下位置

1. 环境变量 =CARGO_HTTP_PROXY=

#+begin_src sh
export CARGO_HTTP_PROXY=http://127.0.0.1:1080
#+end_src

1. [[https://doc.rust-lang.org/cargo/reference/config.html#hierarchical-structure][任意 config.toml]] 中的 =http.proxy=

#+begin_src sh
[http]
proxy = "127.0.0.1:1080"
#+end_src

1. 环境变量 =HTTPS_PROXY= & =https_proxy= & =http_proxy=

#+begin_src sh
export https_proxy=http://127.0.0.1:1080
export http_proxy=http://127.0.0.1:1080
#+end_src

=http_proxy= 一般来讲没必要，除非使用基于 HTTP 的 Crate Repository

Cargo 使用 libcurl，故可接受任何符合 [[https://everything.curl.dev/usingcurl/proxies][libcurl format]] 的地址与协议

( =127.0.0.1:1080= , =http://127.0.0.1:1080= , =socks5://127.0.0.1:1080= ）均可

refer [[https://doc.rust-lang.org/cargo/reference/config.html#httpproxy]]

*** apt (apt-get)
:PROPERTIES:
:CUSTOM_ID: apt-apt-get
:END:
在 =/etc/apt/apt.conf.d/= 目录下新增 =proxy.conf= 文件，加入：

#+begin_example
Acquire::http::Proxy "http://127.0.0.1:8080/";
Acquire::https::Proxy "http://127.0.0.1:8080/";
#+end_example

注：无法使用 Socks5 代理。

refer [[https://askubuntu.com/a/349765/883355]]

*** curl
:PROPERTIES:
:CUSTOM_ID: curl
:END:
#+begin_src sh
socks5 = "127.0.0.1:1080"
#+end_src

add to =~/.curlrc=

refer [[https://www.zhihu.com/question/31360766]]

*** Gradle
:PROPERTIES:
:CUSTOM_ID: gradle
:END:
=~/.gradle/gradle.properties=：

#+begin_example
systemProp.http.proxyHost=127.0.0.1
systemProp.http.proxyPort=1087
systemProp.https.proxyHost=127.0.0.1
systemProp.https.proxyPort=1087
#+end_example

refer [[https://stackoverflow.com/q/5991194/12539782]]

*** Maven
:PROPERTIES:
:CUSTOM_ID: maven
:END:
=%Maven 安装目录%/conf/settings.xml=：

#+begin_example
<!-- proxies
 | This is a list of proxies which can be used on this machine to connect to the network.
 | Unless otherwise specified (by system property or command-line switch), the first proxy
 | specification in this list marked as active will be used.
 |-->
<proxies>
  <!-- proxy
   | Specification for one proxy, to be used in connecting to the network.
   |
  <proxy>
    <id>optional</id>
    <active>true</active>
    <protocol>http</protocol>
    <username>proxyuser</username>
    <password>proxypass</password>
    <host>proxy.host.net</host>
    <port>80</port>
    <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
  </proxy>
  -->
   <proxy>
    <id>proxy</id>
    <active>true</active>
    <protocol>http</protocol>
    <host>127.0.0.1</host>
    <port>1087</port>
  </proxy>
</proxies>
#+end_example

refer [[https://maven.apache.org/guides/mini/guide-proxies.html]]

*** go get
:PROPERTIES:
:CUSTOM_ID: go-get
:END:
#+begin_src sh
HTTP_PROXY=socks5://localhost:1080 go get
#+end_src

测试了下 =HTTPS_PROXY= 和 =ALL_PROXY= 都不起作用

OR 使用[[https://goproxy.io/][goproxy.io]]

*** npm
:PROPERTIES:
:CUSTOM_ID: npm
:END:
#+begin_src sh
npm config set proxy http://127.0.0.1:1087
npm config set https-proxy http://127.0.0.1:1087
#+end_src

用 Socks5 就报错- -

推荐使用 yarn，npm 是真的慢

refer [[https://stackoverflow.com/q/7559648/12539782]]

*** yarn
:PROPERTIES:
:CUSTOM_ID: yarn
:END:
#+begin_src sh
yarn config set proxy http://XX
yarn config set https-proxy http://XX
#+end_src

不支持 socks5

refer [[https://github.com/yarnpkg/yarn/issues/3418]]

*** rustup
:PROPERTIES:
:CUSTOM_ID: rustup
:END:
#+begin_src sh
export https_proxy=http://127.0.0.1:1080
#+end_src

*** gem
:PROPERTIES:
:CUSTOM_ID: gem
:END:
=~/.gemrc=：

#+begin_example
---
# See 'gem help env' for additional options.
http_proxy: http://localhost:1087
#+end_example

*** brew
:PROPERTIES:
:CUSTOM_ID: brew
:END:
#+begin_example
ALL_PROXY=socks5://localhost:1080 brew ...
#+end_example

*** wget
:PROPERTIES:
:CUSTOM_ID: wget
:END:
=~/.wgetrc=：

#+begin_example
use_proxy=yes
http_proxy=127.0.0.1:1087
https_proxy=127.0.0.1:1087
#+end_example

refer [[https://stackoverflow.com/q/11211705/12539782]]

*** snap
:PROPERTIES:
:CUSTOM_ID: snap
:END:
#+begin_src sh
sudo snap set system proxy.http="http://127.0.0.1:1087"
sudo snap set system proxy.https="http://127.0.0.1:1087"
#+end_src

refer [[https://snapcraft.io/docs/system-options]]

*** docker
:PROPERTIES:
:CUSTOM_ID: docker
:END:
#+begin_src sh
sudo mkdir -p /etc/systemd/system/docker.service.d
sudo vim /etc/systemd/system/docker.service.d/proxy.conf
#+end_src

#+begin_example
[Service]
Environment="ALL_PROXY=socks5://localhost:1080"
#+end_example

#+begin_src sh
sudo systemctl daemon-reload
sudo systemctl restart docker
#+end_src

必须是 Socks5，http 不生效

refer

1. [[https://docs.docker.com/network/proxy/]]
2. [[https://elegantinfrastructure.com/docker/ultimate-guide-to-docker-http-proxy-configuration/]]

*** Electron Dev Dependency
:PROPERTIES:
:CUSTOM_ID: electron-dev-dependency
:END:
设置环境变量

#+begin_src sh
ELECTRON_GET_USE_PROXY=true
GLOBAL_AGENT_HTTPS_PROXY=http://localhost:1080
#+end_src

refer

1. [[https://www.electronjs.org/docs/latest/tutorial/installation#proxies]]
2. [[https://github.com/gajus/global-agent/blob/v2.1.5/README.md#environment-variables]]

** Tools for Proxy
:PROPERTIES:
:CUSTOM_ID: tools-for-proxy
:END:
*** Clash
:PROPERTIES:
:CUSTOM_ID: clash
:END:
*** v2ray-core
:PROPERTIES:
:CUSTOM_ID: v2ray-core
:END:
*** ssrlocal, sslocal
:PROPERTIES:
:CUSTOM_ID: ssrlocal-sslocal
:END:
** 一些资源
:PROPERTIES:
:CUSTOM_ID: 一些资源
:END:
- [[https://github.com/aglent/autoproxy]]
- [[https://wiki.archlinux.org/title/Proxy_server]]
- [[https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList]]
- [[https://en.wikipedia.org/wiki/SOCKS]]
- [[https://github.com/tianheg/open-network]]
- [[https://github.com/comwrg/package-manager-proxy-settings]]
