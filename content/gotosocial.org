#+TITLE: Social Status

#+BEGIN_EXPORT html
<div id="listenbrainz-widget" class="my-4"></div>

<div id="posts" class="space-y-4"></div>

<script>
// ListenBrainz Widget

const createMusicWidgetHTML = (title, trackName, artistName, isError = false) => {
    let bgColor = 'bg-white dark:bg-gray-800';
    let titleColor = 'text-gray-800 dark:text-white';
    let trackColor = 'text-gray-600 dark:text-gray-300';
    let artistColor = 'text-gray-500 dark:text-gray-400';
    let borderColor = 'border-gray-300 dark:border-gray-700';

    if (isError) {
        bgColor = 'bg-red-100 dark:bg-red-900';
        titleColor = 'text-red-800 dark:text-red-200';
        trackColor = 'text-red-600 dark:text-red-300'; // For the main message
        borderColor = 'border-red-300 dark:border-red-700';
    }

    let contentHTML = '';
    if (trackName) {
        contentHTML = `<p class="text-md ${trackColor}">${trackName}</p>`;
        if (artistName) {
            contentHTML += `<p class="text-sm ${artistColor}">by ${artistName}</p>`;
        }
    } else {
        // For "No track" or error messages where there's no artist
        contentHTML = `<p class="text-md ${trackColor}">${title === 'Music Status' && isError ? 'Unable to load music data.' : 'No track currently playing or recently played.'}</p>`;
    }

    if (isError && title === 'Music Status') {
        contentHTML = `<p class="text-md ${trackColor}">Unable to load music data.</p>`;
    }

    const profileUrl = 'https://listenbrainz.org/user/tianheg';

    // The entire widget is now a link
    return `
        <a href="${profileUrl}" target="_blank" rel="noopener noreferrer" class="block p-4 ${bgColor} rounded-lg shadow-md border ${borderColor} hover:shadow-lg transition-shadow duration-200">
            <h3 class="text-xl font-semibold ${titleColor} mb-2">${title}</h3>
            ${contentHTML}
        </a>
    `;
};

const listenBrainzWidget = async () => {
    const playingNowUrl = `https://api.listenbrainz.org/1/user/tianheg/playing-now`;
    const listensUrl = `https://api.listenbrainz.org/1/user/tianheg/listens`;
    const widgetContainer = document.getElementById('listenbrainz-widget');

    try {
        const responsePlayingNow = await fetch(playingNowUrl);
        const dataPlayingNow = await responsePlayingNow.json();

        if (dataPlayingNow.payload && dataPlayingNow.payload.playing_now && dataPlayingNow.payload.listens && dataPlayingNow.payload.listens.length > 0 && dataPlayingNow.payload.listens[0].track_metadata) {
            const track = dataPlayingNow.payload.listens[0].track_metadata;
            widgetContainer.innerHTML = createMusicWidgetHTML('Now Playing', track.track_name, track.artist_name);
        } else {
            const responseListens = await fetch(listensUrl);
            const dataListens = await responseListens.json();

            if (dataListens.payload && dataListens.payload.listens && dataListens.payload.listens.length > 0) {
                const track = dataListens.payload.listens[0].track_metadata;
                widgetContainer.innerHTML = createMusicWidgetHTML('Last Played', track.track_name, track.artist_name);
            } else {
                widgetContainer.innerHTML = createMusicWidgetHTML('Music Status', 'No track currently playing or recently played.');
            }
        }
    } catch (error) {
        console.error('Error fetching ListenBrainz data:', error);
        widgetContainer.innerHTML = createMusicWidgetHTML('Music Status', 'Unable to load music data.', null, true);
    }
};

// Call the ListenBrainz widget function
listenBrainzWidget();

// Load and display statuses
fetch('https://gotosocial.tianheg.workers.dev/')
  .then(response => response.json())
  .then(statuses => {
    const postsContainer = document.getElementById('posts');

    const postsHTML = statuses.map(status => `
  <article class="rounded-lg p-6 shadow-sm ">
    <p class="whitespace-pre-wrap mb-4">${status.text}</p>


    <a href="${status.url}"
      class="ml-2 no-underline"
      target="_blank"
      rel="noopener">
        <time class="text-xs text-gray-500" datetime="${status.created_at}">
        ${new Date(status.created_at).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZoneName: 'short'
        })}
        </time>
    </a>
  </article>
`).join('');

    postsContainer.innerHTML = postsHTML;
  })
  .catch(error => console.error('Error loading statuses:', error));
</script>
#+END_EXPORT
