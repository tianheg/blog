#+SETUPFILE: ./hugo_setup.org
#+TITLE: Arch 安装指南
#+DATE: <2021-08-20 Fri>
安装过程整体顺利，没有无法解决的问题，主要参考资料：

1. [[https://io-oi.me/tech/hello-arch-linux/]]
2. [[https://wiki.archlinux.org/]]
3. Google

除此之外，还有
[[https://python-archinstall.readthedocs.io/en/latest/index.html][archinstall]]

** 初始安装
   :PROPERTIES:
   :CUSTOM_ID: 初始安装
   :END:
*** 更改 BIOS，使用 USB 系统启动盘优先启动
    :PROPERTIES:
    :CUSTOM_ID: 更改-bios使用-usb-系统启动盘优先启动
    :END:
插入制作好的 arch linux USB 启动盘，当前目录下并无
install.txt（详见参考资料 1）。

*** 验证 UEFI
    :PROPERTIES:
    :CUSTOM_ID: 验证-uefi
    :END:
=ls /sys/firmware/efi/efivars= 有输出，说明启动模式为 UEFI。

*** 验证网络
    :PROPERTIES:
    :CUSTOM_ID: 验证网络
    :END:
=ping archlinux.org -c 3= 验证网络，0% packet loss 说明网络正常。

*** 更新系统时间
    :PROPERTIES:
    :CUSTOM_ID: 更新系统时间
    :END:
=timedatectl set-ntp true= 更新系统时间，=timedatectl status= 检查无误。

*** 硬盘分区
    :PROPERTIES:
    :CUSTOM_ID: 硬盘分区
    :END:

1. =fdisk -l= 查看硬盘信息：sdb 119.24g 固态，sda 931.51g 机械
2. =fdisk /dev/sdb= 固态硬盘分区

进入 fdisk 操作界面后，m 查看命令帮助，p 显示目标硬盘分区，g 新建 GPT
分区表。创建 sdb1 分区，n 创建分区、分区序号、类型起始扇区默认，结束扇区
+256M。修改分区类型为 EFI System，p 确认为 EFI System。创建 sdb2
分区，全部默认。我的安装移除了原系统的 signature。

分区结果：

#+begin_example
  Device      Start       End   Sectors  Size Type
  /dev/sdb1    2048    526335    524288  256M EFI System
  /dev/sdb2  526336 250069646 249543311  119G Linux filesystem
#+end_example

关于是否分配 SWAP
分区的讨论：[[https://bbs.archlinuxcn.org/viewtopic.php?id=10472]]

机械硬盘 sda 作为挂载硬盘存储文件。

*** 硬盘格式化、新建文件系统
    :PROPERTIES:
    :CUSTOM_ID: 硬盘格式化新建文件系统
    :END:
#+begin_example
  mkfs.fat -F32 /dev/sdb1
  mkfs.ext4 /dev/sdb2
  mkfs.ext4 /dev/sda
#+end_example

*** 挂载分区
    :PROPERTIES:
    :CUSTOM_ID: 挂载分区
    :END:
#+begin_example
  mount /dev/sdb2 /mnt
  mkdir -p /mnt/boot/efi
  mount /dev/sdb1 /mnt/boot/efi
#+end_example

*** 选择镜像源
    :PROPERTIES:
    :CUSTOM_ID: 选择镜像源
    :END:
#+begin_example
  pacman -Syyy reflector # reflector 能够方便地选择镜像源
  reflector -c China -a 6 --sort rate --save /etc/pacman.d/mirrorlist # 这里的 mirrorlist 是 U 盘中的，还是硬盘中的？U 盘中的
  pacman -Syyy # y 刷新本地缓存 yyy 强制刷新
#+end_example

*** 安装基本系统和安装时要用的应用到硬盘
    :PROPERTIES:
    :CUSTOM_ID: 安装基本系统和安装时要用的应用到硬盘
    :END:
#+begin_example
  pacstrap -i /mnt base base-devel linux linux-firmware dhcpcd vim
#+end_example

** 配置系统
   :PROPERTIES:
   :CUSTOM_ID: 配置系统
   :END:
*** 进入硬盘，而不在 U 盘
    :PROPERTIES:
    :CUSTOM_ID: 进入硬盘而不在-u-盘
    :END:
#+begin_example
  arch-chroot /mnt /bin/bash
#+end_example

*** 生成挂载表
    :PROPERTIES:
    :CUSTOM_ID: 生成挂载表
    :END:
#+begin_example
  genfstab -U -p /mnt >> /mnt/etc/fstab
#+end_example

检查：

#+begin_example
  cat /mnt/etc/fstab
#+end_example

*** 时区和语言
    :PROPERTIES:
    :CUSTOM_ID: 时区和语言
    :END:
设置时区：

#+begin_example
  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
  hwclock --systohc --utc
#+end_example

配置系统语言环境:

=vim /etc/locale.gen= 取消注释：

#+begin_example
  en_US.UTF-8 UTF-8
  ...
  zh_CN.UTF-8 UTF-8
#+end_example

生成配置：

#+begin_example
  locale-gen
#+end_example

设置本地语言环境:

=vim /etc/locale.conf= 输入：

#+begin_example
  LANG=en_US.UTF-8
#+end_example

*** 安装引导程序
    :PROPERTIES:
    :CUSTOM_ID: 安装引导程序
    :END:
#+begin_example
  pacman -S grub efibootmgr
  grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi
  grub-mkconfig -o /boot/grub/grub.cfg
#+end_example

运行 grub
相关操作时，会出现警告：=Warning: os-prober will not be executed to detect other bootable partitions.=。查
arch wiki 后，可以在 /etc/default/grub 中设置
=GRUB_DISABLE_OS_PROBER=false=。

*** 设置主机名
    :PROPERTIES:
    :CUSTOM_ID: 设置主机名
    :END:
#+begin_example
  echo arch > /etc/hostname
#+end_example

=vim /etc/hosts= 添加以下内容：

#+begin_example
  127.0.0.1 localhost
  ::1 localhost
  127.0.0.1 arch.localdomain arch
#+end_example

*** 提前配置网络
    :PROPERTIES:
    :CUSTOM_ID: 提前配置网络
    :END:
#+begin_example
  pacman -S networkmanager
  systemctl enable NetworkManager
  systemctl start NetworkManager
  systemctl status NetworkManager # 检查是否运行
#+end_example

*** 设置 root 密码
    :PROPERTIES:
    :CUSTOM_ID: 设置-root-密码
    :END:
#+begin_example
  passwd
#+end_example

*** 新建普通用户
    :PROPERTIES:
    :CUSTOM_ID: 新建普通用户
    :END:
#+begin_example
  useradd -m -g users -G wheel -s /bin/bash archie
#+end_example

设置普通用户密码：

#+begin_example
  passwd archie
#+end_example

设置普通用户权限:

#+begin_example
  EDITOR=vim visudo
#+end_example

取消注释：

#+begin_example
  ## Uncomment to allow members of group wheel to execute any command

  %wheel ALL=(ALL) ALL

  ## Same thing without a password

  %wheel ALL=(ALL) NOPASSWD: ALL
#+end_example

*** 返回 U 盘
    :PROPERTIES:
    :CUSTOM_ID: 返回-u-盘
    :END:
#+begin_example
  exit
#+end_example

** 重启系统
   :PROPERTIES:
   :CUSTOM_ID: 重启系统
   :END:
#+begin_example
  umount -R /mnt
  reboot
#+end_example

开机后改动 BIOS，配置「系统启动」后，拔掉 U 盘。普通用户 archie 登录。

** 完善系统
   :PROPERTIES:
   :CUSTOM_ID: 完善系统
   :END:
*** 启动微码更新
    :PROPERTIES:
    :CUSTOM_ID: 启动微码更新
    :END:
#+begin_example
  sudo pacman -S intel-ucode
  sudo grub-mkconfig -o /boot/grub/grub.cfg
#+end_example

*** 完善显卡驱动
    :PROPERTIES:
    :CUSTOM_ID: 完善显卡驱动
    :END:
这一步要在知道自己显卡配置的前提下执行。

**** VA-API or VDPAU
     :PROPERTIES:
     :CUSTOM_ID: va-api-or-vdpau
     :END:
#+begin_example
  sudo pacman -S libva-utils vdpauinfo
  vainfo
  vdpauinfo
#+end_example

#+begin_example
  vainfo: VA-API version: 1.12 (libva 2.12.0) vainfo: Driver
  version: Intel iHD driver for Intel(R) Gen Graphics - 21.3.2 ()
  vainfo: Supported profile and entrypoints VAProfileNone :
  VAEntrypointVideoProc VAProfileNone : VAEntrypointStats
  VAProfileMPEG2Simple : VAEntrypointVLD VAProfileMPEG2Simple :
  VAEntrypointEncSlice VAProfileMPEG2Main : VAEntrypointVLD
  VAProfileMPEG2Main : VAEntrypointEncSlice VAProfileH264Main :
  VAEntrypointVLD VAProfileH264Main : VAEntrypointEncSlice
  VAProfileH264Main : VAEntrypointFEI VAProfileH264Main :
  VAEntrypointEncSliceLP VAProfileH264High : VAEntrypointVLD
  VAProfileH264High : VAEntrypointEncSlice VAProfileH264High :
  VAEntrypointFEI VAProfileH264High : VAEntrypointEncSliceLP
  VAProfileVC1Simple : VAEntrypointVLD VAProfileVC1Main :
  VAEntrypointVLD VAProfileVC1Advanced : VAEntrypointVLD
  VAProfileJPEGBaseline : VAEntrypointVLD VAProfileJPEGBaseline :
  VAEntrypointEncPicture VAProfileH264ConstrainedBaseline:
  VAEntrypointVLD VAProfileH264ConstrainedBaseline: VAEntrypointEncSlice
  VAProfileH264ConstrainedBaseline: VAEntrypointFEI
  VAProfileH264ConstrainedBaseline: VAEntrypointEncSliceLP
  VAProfileVP8Version0\_3 : VAEntrypointVLD VAProfileVP8Version0\_3 :
  VAEntrypointEncSlice VAProfileHEVCMain : VAEntrypointVLD
  VAProfileHEVCMain : VAEntrypointEncSlice VAProfileHEVCMain :
  VAEntrypointFEI VAProfileHEVCMain10 : VAEntrypointVLD
  VAProfileHEVCMain10 : VAEntrypointEncSlice VAProfileVP9Profile0 :
  VAEntrypointVLD VAProfileVP9Profile2 : VAEntrypointVLD

  display: :0 screen: 0 Failed to open VDPAU backend
  libvdpau\_va\_gl.so: cannot open shared object file: No such file or
  directory Error creating VDPAU device: 1
#+end_example

So mine is VA-API, I supposed to install
[[https://wiki.archlinux.org/title/Hardware_video_acceleration#:~:text=VA-API%20on%20Radeon%20HD%202000%20and%20newer%20GPUs][libva-mesa-driver]].

我的两种 GPU：

00:02.0 VGA compatible controller: Intel Corporation UHD Graphics 620
(rev 07) 01:00.0 Display controller: Advanced Micro Devices, Inc.
[AMD/ATI] Topaz XT [Radeon R7 M260/M265 / M340/M360 / M440/M445 /
530/535 / 620/625 Mobile] (rev c3)

- Radeon R7 M260(Topaz)
  [[https://en.wikipedia.org/wiki/List_of_AMD_graphics_processing_units#Radeon_R5/R7/R9_M200_series]]

#+begin_example
  sudo pacman -S xf86-video-intel intel-media-driver vulkan-intel xf86-video-amdgpu xf86-video-ati mesa-vdpau vulkan-radeon
#+end_example

不推荐安装 =xf86-video-intel=，详见
[[https://wiki.archlinux.org/title/Intel_graphics#:~:text=Often%20not%20recommended%2C%20see%20note%20below][Intel
graphics - ArchWiki]]

CPU
的详细信息：[[https://en.wikipedia.org/wiki/List_of_Intel_graphics_processing_units#:~:text=38.4-,Core%20i5-8250U,-Core%20i5-8350U]]

HDMI audio:
[[https://wiki.archlinux.org/title/ATI#:~:text=HDMI%20audio%20is%20supported]]

ref:

1. [[https://wiki.archlinux.org/title/Hardware_video_acceleration]]
2. [[https://wiki.archlinux.org/title/Vulkan]]
3. [[https://wiki.archlinux.org/title/Xorg#Driver_installation]]
4. [[https://wiki.archlinux.org/title/Hardware_video_acceleration#:~:text=VDPAU%20on%20Radeon%20R300%20and%20newer%20GPUs]]

*** 安装图形界面
    :PROPERTIES:
    :CUSTOM_ID: 安装图形界面
    :END:
#+begin_example
  sudo pacman -S xorg xorg-server xorg-xinit plasma # gnome gnome-extra
  # systemctl enable gdm
  systemctl enable sddm # for kde(plasma)
#+end_example

桌面环境为 GNOME 时，切换 Wayland 至 Xorg：

#+begin_example
  sudo vim /etc/gdm/custom.conf
#+end_example

=/etc/gdm/custom.conf=:

#+begin_example
  [daemon]
  # Uncoment the line below to force the login screen to use Xorg
  -#WaylandEnable=false
  +WaylandEnable=false
#+end_example

重启后，图形界面打开，但无法打开 Gnome Terminal，通过 Ctrl+Alt+F2
进入命令行模式，输入 gnome-terminal 显示：

#+begin_example
  # Locale not supported by C library.
  # Using the fallback 'C' locale
  Unable to init server: Could not connect: Connection refused
  # Failed to parse arguments: Cannot open display!
#+end_example

解决：在配置系统语言环境时，选择了 es_US，而不是 en_US。

*** SSD 优化
    :PROPERTIES:
    :CUSTOM_ID: ssd-优化
    :END:
**** 开启TRIM
     :PROPERTIES:
     :CUSTOM_ID: 开启trim
     :END:
一定要确认固态硬盘是否支持，否则别用。会导致数据丢失

查看是否支持：=lsblk --discard= 如果输出的 DISC-GRAN 和 DISC-MAX 不为
0，则表明支持。

#+begin_example
  sudo vim /etc/fstab
#+end_example

添加 noatime 和 diacard：

#+begin_example
  # <file system> <dir> <type> <options> <dump> <pass>
  # /dev/sdb2
  UUID=b182ad17-2f74-4bf0-95b6-a42884a4ff79 /          ext4       rw,noatime,discard 0 1

  # /dev/sdb1
  UUID=EF6F-2E0C       /boot/efi  vfat       rw,noatime,discard,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 2
#+end_example

**** 更换 I/O  scheduler
     :PROPERTIES:
     :CUSTOM_ID: 更换-io-scheduler
     :END:
#+begin_example
  sudo vim /etc/default/grub
#+end_example

找到 =GRUB_CMDLINE_LINUX_DEFAULT= 这一行，添加 =elevator=noop=:

#+begin_example
  GRUB_CMDLINE_LINUX_DEFAULT="elevator=noop loglevel=3 quiet"
#+end_example

#+begin_example
  sudo grub-mkconfig -o /boot/grub/grub.cfg
#+end_example

**** 迁移高读写文件到 tmpfs
     :PROPERTIES:
     :CUSTOM_ID: 迁移高读写文件到-tmpfs
     :END:
#+begin_example
  sudo vim /etc/fstab
#+end_example

添加以下内容到最后：

#+begin_example
  tmpfs  /tmp    tmpfs   defaults,noatime,mode=1777 0 0
  tmpfs  /var/log    tmpfs   defaults,noatime,mode=1777 0 0
  tmpfs  /var/tmp    tmpfs   defaults,noatime,mode=1777 0 0
#+end_example

将 Google Chrome 的缓存挂载到 /tmp（后因排查
[[https://github.com/tianheg/blog/issues/147][arch linux system freeze
after connecting wifi]] 问题取消挂载）：

#+begin_example
  cd ~/.cache/google-chrome/Default/ && rm -rf Cache && ln -sf /tmp Cache
  cd ~/.cache/google-chrome/Default/ && unlink Cache # 取消 Symbolic Link
#+end_example

*** 检查硬盘状况
    :PROPERTIES:
    :CUSTOM_ID: 检查硬盘状况
    :END:
#+begin_example
  sudo pacman -S hdparm smartmontools
  sudo hdparm -I /dev/sdb
  sudo smartctl -t short /dev/sdb
#+end_example

*** 测试固态硬盘速度
    :PROPERTIES:
    :CUSTOM_ID: 测试固态硬盘速度
    :END:
#+begin_example
  sudo dd if=/dev/zero of=/tmp/test.img bs=1G count=1 oflag=dsync
#+end_example

至此系统完善到此告一段落。

** 其他
   :PROPERTIES:
   :CUSTOM_ID: 其他
   :END:

- [[https://nyac.at/4][在阿里云服务器上安装 Arch Linux]]
