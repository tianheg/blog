<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel>
<title>一大加贝</title>
<link>https://www.yidajiabei.xyz/blog/</link>
<description>学习技术，热爱生活</description>
<generator>Python script wrote by myself</generator>
<language>zh-CN</language>
<managingEditor>me@yidajiabei.xyz (Jim Gao)</managingEditor>
<webMaster>me@yidajiabei.xyz (Jim Gao)</webMaster>
<copyright>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</copyright>
<lastBuildDate>Tue, 08 Feb 2022 11:01:38 +0800</lastBuildDate>
  <atom:link rel="self" type="application/rss+xml" href="https://www.yidajiabei.xyz/blog/index.xml"/>
<item><title>深入 PHP 与 jQuery 开发</title><link>https://www.yidajiabei.xyz/blog/2022/pro-php-and-jquery.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/pro-php-and-jquery.html</guid><pubDate>Sun, 06 Feb 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;深入 PHP 与 jQuery 开发&lt;/h1&gt;
&lt;/header&gt;&lt;nav id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org4a94906"&gt;1. 第三章：面向对象编程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgdde9475"&gt;1.1. 对象和类&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org6b19b4a"&gt;1.1.1. 类和对象的差异&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org54a7949"&gt;1.1.2. 创建类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf3b94c5"&gt;1.1.3. 定义类属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3fcec15"&gt;1.1.4. 定义类方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4ec8ea3"&gt;1.1.5. 使用类继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge2abf93"&gt;1.1.6. 指定属性或方法的可见度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb044777"&gt;1.1.7. 文档块注释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1014c4f"&gt;1.2. 面向对象与面向过程的差异&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9eb0921"&gt;2. 第四章：构建活动日程表&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgc50bf18"&gt;2.1. 规划设计&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5dad985"&gt;2.1.1. 定义数据库结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga5da23e"&gt;2.1.2. 创建类映射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7fb8d0f"&gt;2.1.3. 规划项目的目录结构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/nav&gt;

&lt;div id="outline-container-org4a94906" class="outline-2"&gt;
&lt;h2 id="org4a94906"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 第三章：面向对象编程&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
面向对象编程（OOP）：充分利用代码，将实现同类功能的代码聚合在一起，组织成类。
&lt;/p&gt;

&lt;p&gt;
不要重复自己（DRY，Don't repeat yourself）
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdde9475" class="outline-3"&gt;
&lt;h3 id="orgdde9475"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; 对象和类&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;类的基础组成&lt;/li&gt;
&lt;li&gt;对象和类各自特点&lt;/li&gt;
&lt;li&gt;它们的用法&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b19b4a" class="outline-4"&gt;
&lt;h4 id="org6b19b4a"&gt;&lt;span class="section-number-4"&gt;1.1.1&lt;/span&gt; 类和对象的差异&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-1"&gt;
&lt;p&gt;
类，打个比方，就像房子的蓝图。它在纸上清晰地定义了房子的形状，定义了房子各个部分之间的关系，并且计划好了怎么盖，虽然还没盖。
&lt;/p&gt;

&lt;p&gt;
对象就像依据蓝图造好的实实在在的房子。在对象中存储的数据就像组成房子的木头、电线和混凝土，在房子没盖起来之前，它们只是一堆东西。然而，当这些东西组装到一起，就成了一座结构完整且实用的房子。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;数据结构和行为组合到一起构成类，类使用这些信息生成对象。&lt;/b&gt; 同一个类同一时间可生成很多对象，每个对象相对于其他对象都是独立的。
&lt;/p&gt;

&lt;p&gt;
继续使用盖房子比喻，这类似于用同一张蓝图在一大块地上盖房子：150 套不同的住房，看起来相同，但住着不同的家庭，有着不同的装饰。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54a7949" class="outline-4"&gt;
&lt;h4 id="org54a7949"&gt;&lt;span class="section-number-4"&gt;1.1.2&lt;/span&gt; 创建类&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-2"&gt;
&lt;p&gt;
class ClassName
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf3b94c5" class="outline-4"&gt;
&lt;h4 id="orgf3b94c5"&gt;&lt;span class="section-number-4"&gt;1.1.3&lt;/span&gt; 定义类属性&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-3"&gt;
&lt;p&gt;
public $prop1 = "I'm a class property!";
&lt;/p&gt;

&lt;p&gt;
箭头（-&gt;）是访问特定对象包含的属性或方法的一个面向对象构造。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3fcec15" class="outline-4"&gt;
&lt;h4 id="org3fcec15"&gt;&lt;span class="section-number-4"&gt;1.1.4&lt;/span&gt; 定义类方法&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-4"&gt;
&lt;p&gt;
方法是只属于某一类的函数。
&lt;/p&gt;

&lt;p&gt;
OOP 使对象个体保持独立，代码的不同部分能很容易地分离成较小且相关的包。
&lt;/p&gt;

&lt;p&gt;
PHP 还提供了一些特殊方法，简化代码（Magic methods are special methods which override PHP's default's action when certain actions are performed on an object.  from &lt;a href="https://www.php.net/manual/en/language.oop5.magic.php"&gt;Magic Methods - PHP Manual&lt;/a&gt;）。
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;构造函数和析构函数&lt;/li&gt;
&lt;li&gt;将类输出为字符串&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
__construct，__destruct，unset，__toString
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4ec8ea3" class="outline-4"&gt;
&lt;h4 id="org4ec8ea3"&gt;&lt;span class="section-number-4"&gt;1.1.5&lt;/span&gt; 使用类继承&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-5"&gt;
&lt;p&gt;
使用 extends 关键字，一个类能够从其他的类继承方法和属性。
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;覆盖继承来的属性和方法&lt;/li&gt;
&lt;li&gt;覆盖时保留被覆盖方法的功能&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge2abf93" class="outline-4"&gt;
&lt;h4 id="orge2abf93"&gt;&lt;span class="section-number-4"&gt;1.1.6&lt;/span&gt; 指定属性或方法的可见度&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-6"&gt;
&lt;p&gt;
三个可见度关键字：public（公开的），protected（受保护的），private（私有的）
&lt;/p&gt;

&lt;p&gt;
还有一种可见度：static（静态的），静态的方法和属性无需创建类的实例就可以访问。
&lt;/p&gt;

&lt;p&gt;
为什么没有思考？
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb044777" class="outline-4"&gt;
&lt;h4 id="orgb044777"&gt;&lt;span class="section-number-4"&gt;1.1.7&lt;/span&gt; 文档块注释&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-7"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-php"&gt;/**
 * 
 * @author Jim Gao &lt;me@yidajiabei.xyz&gt;
 * @copyright 2022 Jim Gao
 * @license link
 * @var
 * @param
 * @return
 */
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1014c4f" class="outline-3"&gt;
&lt;h3 id="org1014c4f"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; 面向对象与面向过程的差异&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
为什么在大项目中，采用面向对象方法？
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;容易实现&lt;/li&gt;
&lt;li&gt;更好的组织&lt;/li&gt;
&lt;li&gt;更容易维护&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
面向过程：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-php"&gt;&lt;?php

function changeJob($person, $newjob)
{
  $person['job'] = $newjob;
  return $person;
}

function happyBirthday($person)
{
  ++$person['age'];
  return $person;
}

$person1 = array(
  'name' =&gt; 'Tom',
  'job' =&gt; 'Button-Pusher',
  'age' =&gt; 34
);

$person2 = array(
  'name' =&gt; 'John',
  'job' =&gt; 'Lever-Pusher',
  'age' =&gt; 42
);

echo "&lt;pre&gt;Person 1: ", print_r($person1, TRUE), "&lt;/pre&gt;";
echo "&lt;pre&gt;Person 2: ", print_r($person2, TRUE), "&lt;/pre&gt;";

$person1 = changeJob($person1, 'Box-Mover');
$person1 = happyBirthday($person1);

$person2 = happyBirthday($person2);

echo "&lt;pre&gt;Person 1: ", print_r($person1, TRUE), "&lt;/pre&gt;";
echo "&lt;pre&gt;Person 2: ", print_r($person2, TRUE), "&lt;/pre&gt;";
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
面向对象：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-php"&gt;&lt;?php

class Person
{
  private $_name;
  private $_job;
  private $_age;

  public function __construct($name, $job, $age)
  {
    $this-&gt;_name = $name;
    $this-&gt;_job = $job;
    $this-&gt;_age = $age;
  }

  public function changeJob($newjob)
  {
    $this-&gt;_job = $newjob;
  }

  public function happyBirthday()
  {
    ++$this-&gt;_age;
  }
}

$person1 = new Person("Tom", "Button-Pusher", 34);
$person2 = new Person("John", "Lever Puller", 41);

echo "&lt;pre&gt;Person 1: ", print_r($person1, TRUE), "&lt;/pre&gt;";
echo "&lt;pre&gt;Person 2: ", print_r($person2, TRUE), "&lt;/pre&gt;";

$person1-&gt;changeJob('Box-Mover');
$person1-&gt;happyBirthday();
$person2-&gt;happyBirthday();

echo "&lt;pre&gt;Person 1: ", print_r($person1, TRUE), "&lt;/pre&gt;";
echo "&lt;pre&gt;Person 2: ", print_r($person2, TRUE), "&lt;/pre&gt;";
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9eb0921" class="outline-2"&gt;
&lt;h2 id="org9eb0921"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 第四章：构建活动日程表&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc50bf18" class="outline-3"&gt;
&lt;h3 id="orgc50bf18"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; 规划设计&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
由数据库 MySQL 驱动，先定义数据库结构，后规划网站地图（如何从数据库中获取数据和修改数据）。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5dad985" class="outline-4"&gt;
&lt;h4 id="org5dad985"&gt;&lt;span class="section-number-4"&gt;2.1.1&lt;/span&gt; 定义数据库结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-1"&gt;
&lt;p&gt;
对于一个活动日程表来说，需要存储的信息：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;event_id 一个自增长整数，每个活动用该整数唯一标识&lt;/li&gt;
&lt;li&gt;event_title 活动标题&lt;/li&gt;
&lt;li&gt;event_desc 活动详情&lt;/li&gt;
&lt;li&gt;event_start 活动开始时间 格式为：YYYY-MM-DD HH:MM:SS&lt;/li&gt;
&lt;li&gt;event_end 活动结束时间 格式同开始时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga5da23e" class="outline-4"&gt;
&lt;h4 id="orga5da23e"&gt;&lt;span class="section-number-4"&gt;2.1.2&lt;/span&gt; 创建类映射&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-2"&gt;
&lt;p&gt;
主类 Calendar，负责处理与活动日程表有关的所有行为。方法和属性规划：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;构造函数
&lt;ul class="org-ul"&gt;
&lt;li&gt;保证数据库连接。若未连接，就创建一个连接&lt;/li&gt;
&lt;li&gt;设定以下基本属性：数据库对象&lt;/li&gt;
&lt;li&gt;显示当前日期，显示当前月份&lt;/li&gt;
&lt;li&gt;显示当前年份&lt;/li&gt;
&lt;li&gt;这个月有多少天，这个月的起始日是星期几&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;生成活动表单 HTML
&lt;ul class="org-ul"&gt;
&lt;li&gt;检查时候正在修改或创建活动&lt;/li&gt;
&lt;li&gt;如果是修改活动，把活动数据载入表单&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对用户输入进行安全处理后，将新活动保存到数据库&lt;/li&gt;
&lt;li&gt;从数据库删除活动并请求用户确认&lt;/li&gt;
&lt;li&gt;载入活动数据
&lt;ul class="org-ul"&gt;
&lt;li&gt;从数据库载入活动数据&lt;/li&gt;
&lt;li&gt;将指定月份的每个活动按日期保存到一个数组中&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;输出日历信息 HTML。循环活动数据数组，并附加相应的标题及时间&lt;/li&gt;
&lt;li&gt;用 HTML 显示活动数据并允许通过活动 ID 载入活动描述和详情&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7fb8d0f" class="outline-4"&gt;
&lt;h4 id="org7fb8d0f"&gt;&lt;span class="section-number-4"&gt;2.1.3&lt;/span&gt; 规划项目的目录结构&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-3"&gt;
&lt;p&gt;
出于安全考虑，不要把私密数据放在网站根目录或是公开目录中，其中包括数据库配置文件、程序内核，以及网站运行所需的各个类。
&lt;/p&gt;

&lt;p&gt;
需要两个目录：一个公开目录（public），存放供用户直接访问的文件，比如页面、CSS 文件、JavaScript 脚本等；一个是系统目录（sys），存放不易公开的文件，比如数据库账号密码，一些类文件和核心 PHP 文件。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item>
<item><title>十三邀-鲁白</title><link>https://www.yidajiabei.xyz/blog/2022/shisanyao-lubai.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/shisanyao-lubai.html</guid><pubDate>Sat, 05 Feb 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;十三邀-鲁白&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
我很长时间，不是一个自在的人｜十三邀×鲁白 &lt;a href="https://mp.weixin.qq.com/s/2TvLahUxF6D3tPXbwUYJUw"&gt;https://mp.weixin.qq.com/s/2TvLahUxF6D3tPXbwUYJUw&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
自由意志
&lt;/p&gt;

&lt;p&gt;
基因可以决定认知的好坏
&lt;/p&gt;

&lt;p&gt;
心智作为宇宙中最复杂的运作过程，可能把它深藏的秘密留待分子水平的生物学研究来解决
&lt;/p&gt;

&lt;p&gt;
就前额叶发育来说，女孩子发育完成在 22 岁左右，男孩子发育起步晚，但比女孩子更早完成发育。这是早期教育的原因之一，大脑早期的可塑性
&lt;/p&gt;

&lt;p&gt;
总是想要证明自己，其实不是一个好事
&lt;/p&gt;

&lt;p&gt;
记忆定义了一个人
&lt;/p&gt;

&lt;p&gt;
人的认知和大脑前额叶有关
&lt;/p&gt;

&lt;p&gt;
意识才出现可以研究的迹象
&lt;/p&gt;

&lt;p&gt;
人生的长短不重要，重要的是我是否活出了自己
&lt;/p&gt;

&lt;p&gt;
思想家的基础是博学
&lt;/p&gt;

&lt;p&gt;
精神生活&lt;/p&gt;
&lt;/div&gt;</description></item>
<item><title>修复 KDE Plasma panel 崩溃问题</title><link>https://www.yidajiabei.xyz/blog/2022/fix-kde-plasma-panel-crash.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/fix-kde-plasma-panel-crash.html</guid><pubDate>Fri, 04 Feb 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;修复 KDE Plasma panel 崩溃问题&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
&lt;a href="https://www.addictivetips.com/ubuntu-linux-tips/fix-kde-plasma-panel-crash/"&gt;https://www.addictivetips.com/ubuntu-linux-tips/fix-kde-plasma-panel-crash/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
崩溃之后需要重启，不过 KDE 并没有像 GNOME 那样的重启机制。所以需要自定义。
&lt;/p&gt;

&lt;p&gt;
创建一个脚本 panel-restart
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="color: #706565;"&gt;#&lt;/span&gt;&lt;span style="color: #857575;"&gt;!/bin/&lt;/span&gt;&lt;span style="color: #91a0b3;"&gt;bash&lt;/span&gt;
killall plasmashell;plasmashell &amp;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo chmod +x panel-restart
sudo mv panel-restart /usr/bin/
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item>
<item><title>2022 年 1 月下旬总结</title><link>https://www.yidajiabei.xyz/blog/2022/2022-jan-down-summary.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/2022-jan-down-summary.html</guid><pubDate>Thu, 03 Feb 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;2022 年 1 月下旬总结&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
总结 1.20-1.31。
&lt;/p&gt;

&lt;p&gt;
这些天每天都在卖对联，觉不够睡，身体也疲惫，编程也没有精力。这种生活直到 31 号，也就是除夕才结束。除夕那天晚上八点多才回到家里，吃上一碗妈妈包的饺子。
&lt;/p&gt;

&lt;p&gt;
我住在县城爸爸买的房子这儿，卖对联要到老家所属的镇上，骑电动车需要 40 分钟左右的路程。每到逢集时，我都要早起赶到地方，帮着爸爸摆放对联，等待顾客来买。我无数次地想不干这些活，因为我自私地认为编程于我而言更重要些。但是，我又想：如果不干活挣钱，我又哪里来的时间与金钱编程呢？想到这儿，我就坚持着做完了所有事情。终于能够休息，编程了。
&lt;/p&gt;

&lt;p&gt;
在这样忙碌的日子里，我记下来一些感想碎片：
&lt;/p&gt;

&lt;p&gt;
在真正忙碌的日子里，心灵是荒芜的，写诗成为一种奢侈
&lt;/p&gt;

&lt;p&gt;
希望未来的自己不要纠结于太和的房子的归属问题。这个房子不属于我，它应该是爸爸妈妈养老的地方。也是我在故乡的家
&lt;/p&gt;

&lt;p&gt;
物欲的降低，导致人们对精神生活的更高要求
&lt;/p&gt;

&lt;p&gt;
危险的楼梯是我梦里最常见的意象，或陡峭，或上下两难
&lt;/p&gt;

&lt;p&gt;
太在乎别人的看法，以至于丢掉了自我&lt;/p&gt;
&lt;/div&gt;</description></item>
<item><title>笔记本外接显示器间歇性黑屏</title><link>https://www.yidajiabei.xyz/blog/2022/display-blank.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/display-blank.html</guid><pubDate>Thu, 03 Feb 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;笔记本外接显示器间歇性黑屏&lt;/h1&gt;
&lt;/header&gt;&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/g4MkVQpQWA4b2T2zcmO2ew"&gt;https://mp.weixin.qq.com/s/g4MkVQpQWA4b2T2zcmO2ew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/52890380"&gt;https://www.zhihu.com/question/52890380&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20509734"&gt;https://www.zhihu.com/question/20509734&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
试过用铝箔纸包裹 HDMI 线；
&lt;/p&gt;

&lt;p&gt;
不插电源线能解决问题。&lt;/p&gt;
&lt;/div&gt;</description></item>
<item><title>命令行工具</title><link>https://www.yidajiabei.xyz/blog/2022/command-line-tools.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/command-line-tools.html</guid><pubDate>Fri, 28 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;命令行工具&lt;/h1&gt;
&lt;/header&gt;
&lt;div id="outline-container-org8773ba0" class="outline-2"&gt;
&lt;h2 id="org8773ba0"&gt;exa/ls/broot&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc037965" class="outline-2"&gt;
&lt;h2 id="orgc037965"&gt;zoxide/cd&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga10ecc6" class="outline-2"&gt;
&lt;h2 id="orga10ecc6"&gt;bat/cat&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb8dcdba" class="outline-2"&gt;
&lt;h2 id="orgb8dcdba"&gt;fx/jq/hexyl&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7c28d1a" class="outline-2"&gt;
&lt;h2 id="org7c28d1a"&gt;diff-so-fancy/git diff&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge690560" class="outline-2"&gt;
&lt;h2 id="orge690560"&gt;fd/find&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga81a2fc" class="outline-2"&gt;
&lt;h2 id="orga81a2fc"&gt;ripgrep/grep&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org323048a" class="outline-2"&gt;
&lt;h2 id="org323048a"&gt;McFly/ctrl-r&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0c6e2d3" class="outline-2"&gt;
&lt;h2 id="org0c6e2d3"&gt;choose/cut&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb6a75c4" class="outline-2"&gt;
&lt;h2 id="orgb6a75c4"&gt;duf/df&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org80a5289" class="outline-2"&gt;
&lt;h2 id="org80a5289"&gt;ncdu/du&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge4b4f4b" class="outline-2"&gt;
&lt;h2 id="orge4b4f4b"&gt;htop/top&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6628b49" class="outline-2"&gt;
&lt;h2 id="org6628b49"&gt;procs/ps&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9276022" class="outline-2"&gt;
&lt;h2 id="org9276022"&gt;httpie/curl&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org574ccf5" class="outline-2"&gt;
&lt;h2 id="org574ccf5"&gt;dog/dig&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org574ccf5"&gt;
&lt;p&gt;
&lt;a href="https://mp.weixin.qq.com/s/gkPbQTyhAHwYrpzJjftJVQ"&gt;https://mp.weixin.qq.com/s/gkPbQTyhAHwYrpzJjftJVQ&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item>
<item><title>通过 Python 为博客生成 RSS</title><link>https://www.yidajiabei.xyz/blog/2022/python-blog-rss.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/python-blog-rss.html</guid><pubDate>Wed, 26 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;通过 Python 为博客生成 RSS&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
生成步骤：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;通过 gen-json.js 文件，生成 blogs.json&lt;/li&gt;
&lt;li&gt;通过 gen-rss.py 文件，生成 index.xml&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;code&gt;gen-json.js&lt;/code&gt; ：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-js"&gt;&lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;axios&lt;/span&gt; = require(&lt;span style="color: #ddbc91;"&gt;'axios'&lt;/span&gt;);
&lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;cheerio&lt;/span&gt; = require(&lt;span style="color: #ddbc91;"&gt;'cheerio'&lt;/span&gt;);
&lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;fs&lt;/span&gt; = require(&lt;span style="color: #ddbc91;"&gt;'fs'&lt;/span&gt;);

&lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;for blogs.json&lt;/span&gt;
&lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;url&lt;/span&gt; = &lt;span style="color: #ddbc91;"&gt;'https://www.yidajiabei.xyz/blog/index.html'&lt;/span&gt;;

&lt;span style="color: #91a0b3;"&gt;async&lt;/span&gt; &lt;span style="color: #91a0b3;"&gt;function&lt;/span&gt; scrapeData() {
  &lt;span style="color: #91a0b3;"&gt;try&lt;/span&gt; {
    &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Fetch HTML of the page we want to scrape&lt;/span&gt;
    &lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; { data } = &lt;span style="color: #91a0b3;"&gt;await&lt;/span&gt; axios.get(url);
    &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Load HTML we fetched in the previous line&lt;/span&gt;
    &lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;$&lt;/span&gt; = cheerio.load(data);
    &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Select all the list items in plainlist class&lt;/span&gt;
    &lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;listItems&lt;/span&gt; = $(&lt;span style="color: #ddbc91;"&gt;'.org-ul li'&lt;/span&gt;);
    &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Stores data for all countries&lt;/span&gt;
    &lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;countries&lt;/span&gt; = [];
    &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Use .each method to loop through the li we selected&lt;/span&gt;
    listItems.each((idx, el) =&gt; {
      &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Object holding data for each country/jurisdiction&lt;/span&gt;
      &lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;country&lt;/span&gt; = { title: &lt;span style="color: #ddbc91;"&gt;''&lt;/span&gt;, link: &lt;span style="color: #ddbc91;"&gt;''&lt;/span&gt;, date: &lt;span style="color: #ddbc91;"&gt;''&lt;/span&gt;, desp: &lt;span style="color: #ddbc91;"&gt;''&lt;/span&gt; }; &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;, link: ""&lt;/span&gt;
      &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Select the text content of a and span elements&lt;/span&gt;
      &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Store the textcontent in the above object&lt;/span&gt;
      country.title = $(el).children(&lt;span style="color: #ddbc91;"&gt;'a'&lt;/span&gt;).text();
      country.link = $(el).children(&lt;span style="color: #ddbc91;"&gt;'a'&lt;/span&gt;).attr(&lt;span style="color: #ddbc91;"&gt;'href'&lt;/span&gt;);
      country.date = $(el)
        .text()
        .replace(&lt;span style="color: #ddbc91;"&gt;/[^0-9][^\s]+/&lt;/span&gt;g, &lt;span style="color: #ddbc91;"&gt;''&lt;/span&gt;)
        .split(&lt;span style="color: #ddbc91;"&gt;'-'&lt;/span&gt;)
        .join(&lt;span style="color: #ddbc91;"&gt;''&lt;/span&gt;)
        .match(&lt;span style="color: #ddbc91;"&gt;/.{1,2}/&lt;/span&gt;g)
        .join(&lt;span style="color: #ddbc91;"&gt;'-'&lt;/span&gt;);
      &lt;span style="color: #91a0b3;"&gt;if&lt;/span&gt; (country.link.split(&lt;span style="color: #ddbc91;"&gt;'/'&lt;/span&gt;)[0] === &lt;span style="color: #ddbc91;"&gt;'2022'&lt;/span&gt;) {
        country.date = &lt;span style="color: #ddbc91;"&gt;'2022-'&lt;/span&gt; + country.date;
      } &lt;span style="color: #91a0b3;"&gt;else&lt;/span&gt; &lt;span style="color: #91a0b3;"&gt;if&lt;/span&gt; (country.link.split(&lt;span style="color: #ddbc91;"&gt;'/'&lt;/span&gt;)[0] === &lt;span style="color: #ddbc91;"&gt;'2021'&lt;/span&gt;) {
        country.date = &lt;span style="color: #ddbc91;"&gt;'2021-'&lt;/span&gt; + country.date;
      } &lt;span style="color: #91a0b3;"&gt;else&lt;/span&gt; &lt;span style="color: #91a0b3;"&gt;if&lt;/span&gt; (country.link.split(&lt;span style="color: #ddbc91;"&gt;'/'&lt;/span&gt;)[0] === &lt;span style="color: #ddbc91;"&gt;'2020'&lt;/span&gt;) {
        country.date = &lt;span style="color: #ddbc91;"&gt;'2020-'&lt;/span&gt; + country.date;
      } &lt;span style="color: #91a0b3;"&gt;else&lt;/span&gt; &lt;span style="color: #91a0b3;"&gt;if&lt;/span&gt; (country.link.split(&lt;span style="color: #ddbc91;"&gt;'/'&lt;/span&gt;)[0] === &lt;span style="color: #ddbc91;"&gt;'2019'&lt;/span&gt;) {
        country.date = &lt;span style="color: #ddbc91;"&gt;'2019-'&lt;/span&gt; + country.date;
      } &lt;span style="color: #91a0b3;"&gt;else&lt;/span&gt; &lt;span style="color: #91a0b3;"&gt;if&lt;/span&gt; (country.link.split(&lt;span style="color: #ddbc91;"&gt;'/'&lt;/span&gt;)[0] === &lt;span style="color: #ddbc91;"&gt;'2018'&lt;/span&gt;) {
        country.date = &lt;span style="color: #ddbc91;"&gt;'2018-'&lt;/span&gt; + country.date;
      }
      &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;console.log(country.title);&lt;/span&gt;
      &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Populate countries array with country data&lt;/span&gt;
      country.desp = fs
        .readFileSync(&lt;span style="color: #ddbc91;"&gt;'/home/archie/repo/blog/blog/'&lt;/span&gt; + country.link)
        .toString()
        .match(&lt;span style="color: #ddbc91;"&gt;/&lt;body[^&gt;]*&gt;([\w|\W]*)&lt;\/body&gt;/&lt;/span&gt;im)[1]
        .replaceAll(&lt;span style="color: #ddbc91;"&gt;'&lt;'&lt;/span&gt;, &lt;span style="color: #ddbc91;"&gt;'&amp;lt;'&lt;/span&gt;)
        .replaceAll(&lt;span style="color: #ddbc91;"&gt;'&gt;'&lt;/span&gt;, &lt;span style="color: #ddbc91;"&gt;'&amp;gt;'&lt;/span&gt;)
        .trim();
      countries.push(country);
    });
    &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Logs countries array to the console&lt;/span&gt;
    &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;console.dir(countries);&lt;/span&gt;
    &lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Write countries array in countries.json file&lt;/span&gt;
    fs.writeFile(&lt;span style="color: #ddbc91;"&gt;'blogs.json'&lt;/span&gt;, JSON.stringify(countries, &lt;span style="color: #ab85a3;"&gt;null&lt;/span&gt;, 2), (err) =&gt; {
      &lt;span style="color: #91a0b3;"&gt;if&lt;/span&gt; (err) {
        console.error(err);
        &lt;span style="color: #91a0b3;"&gt;return&lt;/span&gt;;
      }
      console.log(&lt;span style="color: #ddbc91;"&gt;'Successfully written data to blogs.json'&lt;/span&gt;);
    });
  } &lt;span style="color: #91a0b3;"&gt;catch&lt;/span&gt; (err) {
    console.error(err);
  }
}
&lt;span style="color: #706565;"&gt;// &lt;/span&gt;&lt;span style="color: #857575;"&gt;Invoke the above function&lt;/span&gt;
scrapeData();
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;gen-rss.py&lt;/code&gt; ：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #706565;"&gt;#&lt;/span&gt;&lt;span style="color: #857575;"&gt;!/usr/bin/env python&lt;/span&gt;

&lt;span style="color: #91a0b3;"&gt;import&lt;/span&gt; json
&lt;span style="color: #91a0b3;"&gt;import&lt;/span&gt; datetime &lt;span style="color: #91a0b3;"&gt;as&lt;/span&gt; dt
&lt;span style="color: #91a0b3;"&gt;from&lt;/span&gt; datetime &lt;span style="color: #91a0b3;"&gt;import&lt;/span&gt; datetime, date, time, timezone

&lt;span style="color: #aaca86;"&gt;domain&lt;/span&gt; = &lt;span style="color: #ddbc91;"&gt;'www.yidajiabei.xyz'&lt;/span&gt;

&lt;span style="color: #aaca86;"&gt;site&lt;/span&gt; = &lt;span style="color: #ddbc91;"&gt;'https://%s/blog/'&lt;/span&gt; % (domain)

&lt;span style="color: #91a0b3;"&gt;def&lt;/span&gt; &lt;span style="color: #a9df90;"&gt;get_end_of_day&lt;/span&gt;(date):
    &lt;span style="color: #91a0b3;"&gt;return&lt;/span&gt; datetime.strptime(
        f&lt;span style="color: #ddbc91;"&gt;'{date} 08:00:00'&lt;/span&gt;, &lt;span style="color: #ddbc91;"&gt;'%Y-%m-%d %H:%M:%S'&lt;/span&gt;).astimezone()

&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;&#35835;&#21462;json&#25991;&#20214;&#20869;&#23481;,&#36820;&#22238;&#23383;&#20856;&#26684;&#24335;&lt;/span&gt;
&lt;span style="color: #91a0b3;"&gt;with&lt;/span&gt; &lt;span style="color: #9fbfdf;"&gt;open&lt;/span&gt;(&lt;span style="color: #ddbc91;"&gt;'./scripts/blogs.json'&lt;/span&gt;,&lt;span style="color: #ddbc91;"&gt;'r'&lt;/span&gt;,encoding=&lt;span style="color: #ddbc91;"&gt;'utf8'&lt;/span&gt;)&lt;span style="color: #91a0b3;"&gt;as&lt;/span&gt; fp:
    &lt;span style="color: #aaca86;"&gt;json_data&lt;/span&gt; = json.load(fp)
    &lt;span style="color: #aaca86;"&gt;itemLines&lt;/span&gt; = [&lt;span style="color: #ddbc91;"&gt;"&lt;item&gt;&lt;title&gt;"&lt;/span&gt; + &lt;span style="color: #9fbfdf;"&gt;str&lt;/span&gt;(json_data[x][&lt;span style="color: #ddbc91;"&gt;'title'&lt;/span&gt;]) + &lt;span style="color: #ddbc91;"&gt;"&lt;/title&gt;&lt;link&gt;"&lt;/span&gt; + site + &lt;span style="color: #9fbfdf;"&gt;str&lt;/span&gt;(json_data[x][&lt;span style="color: #ddbc91;"&gt;'link'&lt;/span&gt;]) + &lt;span style="color: #ddbc91;"&gt;"&lt;/link&gt;&lt;guid isPermaLink=\"true\"&gt;"&lt;/span&gt; + site + &lt;span style="color: #9fbfdf;"&gt;str&lt;/span&gt;(json_data[x][&lt;span style="color: #ddbc91;"&gt;'link'&lt;/span&gt;]) + &lt;span style="color: #ddbc91;"&gt;"&lt;/guid&gt;&lt;pubDate&gt;"&lt;/span&gt; + get_end_of_day(&lt;span style="color: #9fbfdf;"&gt;str&lt;/span&gt;(json_data[x][&lt;span style="color: #ddbc91;"&gt;'date'&lt;/span&gt;])).strftime(&lt;span style="color: #ddbc91;"&gt;"%a, %d %b %Y %I:%M:%S %Z"&lt;/span&gt;) + &lt;span style="color: #ddbc91;"&gt;"&lt;/pubDate&gt;&lt;description type=\"html\"&gt;"&lt;/span&gt; + &lt;span style="color: #9fbfdf;"&gt;str&lt;/span&gt;(json_data[x][&lt;span style="color: #ddbc91;"&gt;'desp'&lt;/span&gt;]) + &lt;span style="color: #ddbc91;"&gt;"&lt;/description&gt;&lt;/item&gt;\n"&lt;/span&gt;&lt;span style="color: #91a0b3;"&gt;for&lt;/span&gt; x &lt;span style="color: #91a0b3;"&gt;in&lt;/span&gt; &lt;span style="color: #9fbfdf;"&gt;range&lt;/span&gt;(0, &lt;span style="color: #9fbfdf;"&gt;len&lt;/span&gt;(json_data) -1)]
    &lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;print(itemLines[0:20])&lt;/span&gt;


&lt;span style="color: #91a0b3;"&gt;with&lt;/span&gt; &lt;span style="color: #9fbfdf;"&gt;open&lt;/span&gt;(&lt;span style="color: #ddbc91;"&gt;'./blog/index.xml'&lt;/span&gt;, &lt;span style="color: #ddbc91;"&gt;'w'&lt;/span&gt;) &lt;span style="color: #91a0b3;"&gt;as&lt;/span&gt; fh:
  fh.write(&lt;span style="color: #ddbc91;"&gt;"""&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"&gt;&lt;channel&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;title&gt;&#19968;&#22823;&#21152;&#36125;&lt;/title&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;link&gt;https://www.yidajiabei.xyz/blog/&lt;/link&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;description&gt;&#23398;&#20064;&#25216;&#26415;&#65292;&#28909;&#29233;&#29983;&#27963;&lt;/description&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;generator&gt;Python script wrote by myself&lt;/generator&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;language&gt;zh-CN&lt;/language&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;managingEditor&gt;me@yidajiabei.xyz (Jim Gao)&lt;/managingEditor&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;webMaster&gt;me@yidajiabei.xyz (Jim Gao)&lt;/webMaster&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;copyright&gt;&#22312;&#20445;&#30041;&#26412;&#25991;&#20316;&#32773;&#21450;&#26412;&#25991;&#38142;&#25509;&#30340;&#21069;&#25552;&#19979;&#65292;&#38750;&#21830;&#19994;&#29992;&#36884;&#38543;&#24847;&#36716;&#36733;&#20998;&#20139;&#12290;&lt;/copyright&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;lastBuildDate&gt;"""&lt;/span&gt;)
  fh.write(&lt;span style="color: #9fbfdf;"&gt;str&lt;/span&gt;(dt.datetime.now().strftime(&lt;span style="color: #ddbc91;"&gt;"%a, %d %b %Y %I:%M:%S +0800"&lt;/span&gt;)))
  fh.write(&lt;span style="color: #ddbc91;"&gt;"""&lt;/lastBuildDate&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;  &lt;atom:link rel="self" type="application/rss+xml" href="https://www.yidajiabei.xyz/blog/index.xml"/&gt;\n"""&lt;/span&gt;)
  fh.writelines(itemLines[0:20])
  fh.write(&lt;span style="color: #ddbc91;"&gt;"""&lt;/channel&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;&lt;/rss&gt;"""&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
参考资料：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="http://johnbokma.com/blog/2019/10/09/hand-coding-an-rss-2-0-feed-in-python.html"&gt;http://johnbokma.com/blog/2019/10/09/hand-coding-an-rss-2-0-feed-in-python.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://johnbokma.com/blog/2019/10/09/rfc-822-and-rfc-3339-dates-in-python.html"&gt;http://johnbokma.com/blog/2019/10/09/rfc-822-and-rfc-3339-dates-in-python.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item>
<item><title>DOM Scripting</title><link>https://www.yidajiabei.xyz/blog/2022/dom-scripting.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/dom-scripting.html</guid><pubDate>Sat, 22 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;DOM Scripting&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
这本书讲了哪些内容：
&lt;/p&gt;

&lt;p&gt;
JS 的历史：JS 的起源，浏览器（Netscape Navigator &amp; Internet Explorer）之间的竞争，网景（Netscape）公司为了对抗微软，联合 Sun 公司和 ECMA 对 JS 进行标准化——ECMAScript，JS 作为解释型脚本语言存在（与 Java 这种编译型语言不同），JS 能够使开发者操作浏览器，DOM（一种概念化文档的方式），世界对象模型（生活中的事物、抽象概念），DOM Level 0，W3C 推出标准化 DOM（这使得任何程序设计语言都能对标记语言写出来的文档进行操控），DOM Level 1（1998.10），DOM 是一种 API（API 是一组已经得到有关各方共同认可的基本约定）。
&lt;/p&gt;

&lt;p&gt;
JS 的语法：语句，注释，变量（variable），赋值（将值存入变量），字面量（literal），数组，操作符，条件语句，循环语句，函数，对象。
&lt;/p&gt;

&lt;p&gt;
DOM：节点，getElementById,getElementsByTagName,getElementsByClassName,getAttribute,setAttribute
&lt;/p&gt;

&lt;p&gt;
编译型语言与解释型语言的区别？
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;在错误提示方面，前者先编译后运行，在编译时即可提示代码 bug；而后者只有在执行到错误代码位置时，才会提示错误&lt;/li&gt;
&lt;li&gt;与解释型语言相比，编译型语言速度更快，可移植性更好&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
通过理解英语，来理解什么是解释型语言。
&lt;/p&gt;

&lt;p&gt;
驼峰格式是函数名、方法名和对象属性名命名的首选格式。
&lt;/p&gt;

&lt;p&gt;
变量命名时，首字母为什么不能是数字？
&lt;/p&gt;

&lt;p&gt;
通过反引号引入变量： &lt;code&gt;`${myVar}`&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
变量名的命名规则？
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;不包含空格、标点符号（$ 除外）&lt;/li&gt;
&lt;li&gt;允许包含字母、数字、美元符号和下划线（但首字母必须为非数字）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
JS 最重要的三种数据类型：字符串，数值，布尔值。
&lt;/p&gt;

&lt;p&gt;
转义字符
&lt;/p&gt;

&lt;p&gt;
一个数组作为另一个数组的元素
&lt;/p&gt;

&lt;div id="outline-container-orgbbfbe7b" class="outline-2"&gt;
&lt;h2 id="orgbbfbe7b"&gt;对象&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbbfbe7b"&gt;
&lt;p&gt;
用点号获取属性和花括号语法创建对象。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3bbdeb5" class="outline-2"&gt;
&lt;h2 id="org3bbdeb5"&gt;操作&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3bbdeb5"&gt;
&lt;p&gt;
自增、自减
&lt;/p&gt;

&lt;p&gt;
字符串与数值之间的类型转换：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;字符串拼接数字，成为字符串&lt;/li&gt;
&lt;li&gt;两个数字拼接，成为数值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
+= 加法和赋值
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea0fa1e" class="outline-2"&gt;
&lt;h2 id="orgea0fa1e"&gt;条件语句&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgea0fa1e"&gt;
&lt;p&gt;
if&#x2026;else&#x2026;
&lt;/p&gt;

&lt;p&gt;
为什么赋值运算并非总是返回真值？
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc85276b" class="outline-2"&gt;
&lt;h2 id="orgc85276b"&gt;循环语句&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc85276b"&gt;
&lt;p&gt;
do&#x2026;while 循环内部的代码至少执行一次
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5c3d44a" class="outline-2"&gt;
&lt;h2 id="org5c3d44a"&gt;函数&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5c3d44a"&gt;
&lt;p&gt;
传参
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd6db91d" class="outline-2"&gt;
&lt;h2 id="orgd6db91d"&gt;变量的作用域&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd6db91d"&gt;
&lt;p&gt;
全局变量：可在任何位置被引用，它的作用域是整个脚本；
&lt;/p&gt;

&lt;p&gt;
局部变量：只存在于声明它的函数内部，作用域仅限于当前函数
&lt;/p&gt;

&lt;p&gt;
仅在函数内部使用的变量一定为局部变量
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1dfcdca" class="outline-2"&gt;
&lt;h2 id="org1dfcdca"&gt;对象&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1dfcdca"&gt;
&lt;p&gt;
对象是自包含的数据集合，包含在对象里的数据可以通过两种形式访问——属性和方法：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;属性是隶属于某个特定对象的变量&lt;/li&gt;
&lt;li&gt;方法是只有某个特定对象才能调用的函数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
为了用对象描述目标事物，需要创建对象实例
&lt;/p&gt;

&lt;p&gt;
创建自己的对象——用户定义对象，与之对应的是内建对象：Array，Math，Date
&lt;/p&gt;

&lt;p&gt;
宿主对象：由运行环境提供，如 document
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item>
<item><title>听「无人知晓第九期：孟岩对话黄海」</title><link>https://www.yidajiabei.xyz/blog/2022/mengyan-huanghai.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/mengyan-huanghai.html</guid><pubDate>Wed, 19 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;听「无人知晓第九期：孟岩对话黄海」&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
&lt;a href="https://www.xiaoyuzhoufm.com/episode/61dbf5b519e8465da2f8f4fd?s=eyJ1IjoiNjA1NGU4NjFlMGY1ZTcyM2JiMjRjMzQ4In0%3D"&gt;E09 孟岩对话黄海：让更多人知道你，还是让爱你的人更爱你 by 无人知晓&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
一、如何定义「品牌」？
&lt;/p&gt;

&lt;p&gt;
黄海：品牌即信任。他认为信任有两种类型：一种是基于人的信任；一种是基于公司的信任。
&lt;/p&gt;

&lt;p&gt;
People follow people, people don't follow the company.
&lt;/p&gt;

&lt;p&gt;
为什么「人与人之间天然地易产生信任关系」？现在的我对陌生人就会有种戒备心，戒备心和信任是可以共存的。
&lt;/p&gt;

&lt;p&gt;
二、星巴克是怎么成为今天的庞然大物的？
&lt;/p&gt;

&lt;p&gt;
关注顾客的感受，建立人与人的链接。
&lt;/p&gt;

&lt;p&gt;
三、做品牌的优秀创始人的思考方式
&lt;/p&gt;

&lt;p&gt;
让喜欢我的人尽可能地更喜欢我，而不是让更多的人的喜欢我。
&lt;/p&gt;

&lt;p&gt;
知名度在眼，美誉度在心，伟大的品牌是心与心的连接。by 孟岩
&lt;/p&gt;

&lt;p&gt;
四、效率和体验如何兼顾？
&lt;/p&gt;

&lt;p&gt;
品牌构造的早期，体验为先，在体验完成后，效率为先。
&lt;/p&gt;

&lt;p&gt;
阿里和美团是 KPI 导向的公司。
&lt;/p&gt;

&lt;p&gt;
多关注体验型公司。
&lt;/p&gt;

&lt;p&gt;
五、品牌是不是智商税？
&lt;/p&gt;

&lt;p&gt;
黄海：品牌不是智商税。
&lt;/p&gt;

&lt;p&gt;
看待世界，不能只以成本作为导向。
&lt;/p&gt;

&lt;p&gt;
六、随着经济社会发展，精神和内心满足类的需求会越来越多
&lt;/p&gt;


&lt;p&gt;
七、投资方式对比：Inside-out, fit-in
&lt;/p&gt;

&lt;p&gt;
真正能够做出好品牌的人：Inside-out，由内而外地表达；很多想做品牌的人是 fit-in。
&lt;/p&gt;

&lt;p&gt;
八、二级市场，宏观经济、政策、国际政治因素，对公司的影响？
&lt;/p&gt;

&lt;p&gt;
企业有自己的生存周期。
&lt;/p&gt;

&lt;p&gt;
孟岩：A 股中两种投资方式：自上而下（关注政策、宏观经济后再决定如何投资）和自下而上（主要关注公司本身、创始人、商业模式、文化）。孟岩坚持自下而上。他认为国家政策不可预测、且不重要，如何避免受到政策影响，分散投资风险，投资数十家。
&lt;/p&gt;

&lt;p&gt;
长期持仓、关注价值。
&lt;/p&gt;

&lt;p&gt;
名词解释
&lt;/p&gt;

&lt;p&gt;
ROI（投资回报率，Return on Investment），指通过投资而应返回的价值，即企业从一项投资活动中得到的经济回报。
&lt;/p&gt;

&lt;p&gt;
SKU（库存量单位，Stock Keeping Unit），即库存进出计量的基本单元。现已引申为产品统一编号的简称，每种产品均对应有唯一的 SKU 号。
&lt;/p&gt;

&lt;p&gt;
SOP（标准作业程序，Standard Operating Procedure），指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作。
&lt;/p&gt;

&lt;p&gt;
一级市场，是资本需求者将证券首次出售给公众时形成的市场。
&lt;/p&gt;

&lt;p&gt;
二级市场，是有价证券的交易场所。&lt;/p&gt;
&lt;/div&gt;</description></item>
<item><title>2022 年 1 月上旬总结</title><link>https://www.yidajiabei.xyz/blog/2022/2022-jan-up-summary.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/2022-jan-up-summary.html</guid><pubDate>Wed, 19 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;2022 年 1 月上旬总结&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
总结 1.1-1.19。
&lt;/p&gt;

&lt;p&gt;
上个月 30 号，从学校回家。这个月到今天为止，大部分时间用来和父亲一起刮大白、和父亲一起卖对联；小部分时间我自己学习编程语言 JS，正在学习字符串 String 的属性和所有方法，下一步计划按照学习 String 的方式，学习 JS 的其他数据类型还有函数等基本概念。
&lt;/p&gt;

&lt;p&gt;
我一直在和自己的无所作为抗争。我除了学习编程，什么都不愿意做；但是，我还是说服自己，让自己做到了上述事情。不是没有情绪，我像个观察者，默默地体会情绪的生发，询问自己为什么不情愿、委屈、愤怒，进一步思考之后，觉得自己很多事情只站在自己角度考虑，而不去想想父亲为什么让我做。
&lt;/p&gt;

&lt;p&gt;
我一直在想：我已经很难改变自己的性格了。我做体力劳动很慢的，总是被父亲训斥，说干活不麻利。无法处理生活中的小事情——用绳子将板子固定在三轮电动车上，我看过父亲怎么系绳子，不过我不记忆他系的方式，因为我不认为自己应该学习这种东西。在之后的几分钟，我不断思考：不学习这些生活中的小事意味着什么。
&lt;/p&gt;

&lt;p&gt;
小事是父亲的生活经验的具体表现。这让他能够更有效地完成一些事。我不学，之后如果遇到类似的，会费些力气才能够解决。生活经验通过父亲传递给我，我再传递给我的孩子。
&lt;/p&gt;

&lt;p&gt;
学习的 String 方法：charAt()、fromCharCode()、indexOf()、substring()、toString()、valueOf()；
&lt;/p&gt;

&lt;p&gt;
阅读的书/文章：在读《哲学的故事》；
&lt;/p&gt;

&lt;p&gt;
思考了什么：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;自己对于职业生涯的规划&lt;/li&gt;
&lt;li&gt;谈恋爱、结婚的想法&lt;/li&gt;
&lt;li&gt;如何更好地了解自己&lt;/li&gt;
&lt;li&gt;学习能给我带来什么&lt;/li&gt;
&lt;li&gt;读书之于我，有怎样的地位&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
有什么值得记录的经历、经验、教训：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;当陌生人赞美你时，说明他/她对你有所求&lt;/li&gt;
&lt;li&gt;人是懒惰的，如何让懒惰的自己高效率地学习工作是我的重要课题&lt;/li&gt;
&lt;li&gt;社交网络让人与人的物理距离缩短，心灵之间的距离却愈加疏远&lt;/li&gt;
&lt;li&gt;人与人之间，存在部分理解，不存在完全理解彼此的一对人&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
在剩下的这个月的这些天（1.20-1.31），计划做哪些事情：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;练习使用 String 的所有方法，试一试做个小游戏&lt;/li&gt;
&lt;li&gt;《哲学的故事》读完：第二章（亚里士多德和希腊科学）、第三章（弗朗西斯·培根），思考这些哲学家为何能够有如此成就&lt;/li&gt;
&lt;li&gt;看电影《低俗小说》，并写影评 1000 字&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item>
<item><title>如何在 Sphinx 下使用 JSDoc</title><link>https://www.yidajiabei.xyz/blog/2022/sphinx-jsdoc.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/sphinx-jsdoc.html</guid><pubDate>Fri, 14 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;如何在 Sphinx 下使用 JSDoc&lt;/h1&gt;
&lt;/header&gt;&lt;nav id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org3cdb714"&gt;1. 使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org285dbc6"&gt;2. 文件结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org295be03"&gt;3. GitHub Action 自动部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/nav&gt;
&lt;p&gt;
我建了一个仓库，记录自己学习 MDN 网站的过程。我发现了很多函数，它们有参数和返回值，我想着能不能把学习使用过的函数做成一个文档列表，于是我找到了 JSDoc&lt;sup&gt;&lt;a id="fnr.1" class="footref" href="#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;。它能根据 js 源文件生成文档。
&lt;/p&gt;

&lt;p&gt;
Sphinx 是 Python 编程语言下的常见文档构建程序。我想把 JSDoc 和它结合起来，于是我找到了 sphinx-js&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;。
&lt;/p&gt;

&lt;div id="outline-container-org3cdb714" class="outline-2"&gt;
&lt;h2 id="org3cdb714"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 使用&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
确保 Python 版本为 3.8，使用 3.10 会报错：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;Could not import extension sphinx_js (exception: cannot import name &lt;span style="color: #ddbc91;"&gt;'Mapping'&lt;/span&gt; from &lt;span style="color: #ddbc91;"&gt;'collections'&lt;/span&gt; (/usr/lib/python3.10/collections/__init__.py))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
可以将待安装的 pypi 包保存为 requirements.txt：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-txt"&gt;sphinx
sphinx-autobuild
sphinx-js&gt;=3.1
## 以上必选，以下分别是主题，md 文档支持，可不安装
furo
myst-parser
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;&#21019;&#24314;&#34394;&#25311;&#29615;&#22659;&#24182;&#26356;&#26032;&#20381;&#36182;&#21040;&#26368;&#26032;&#29256;&#26412;&lt;/span&gt;
python -m venv venv --upgrade-deps
&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;&#28608;&#27963;&#34394;&#25311;&#29615;&#22659;&lt;/span&gt;
. venv/bin/activate
&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;&#23433;&#35013; pypi &#21253;&lt;/span&gt;
pip install -r requirements.txt
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Sphinx 文档配置文件 conf.py：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #aaca86;"&gt;extensions&lt;/span&gt; = [
  &lt;span style="color: #ddbc91;"&gt;"sphinx_js"&lt;/span&gt;
]
&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;Used to extract JSDoc function/class docs from source&lt;/span&gt;
&lt;span style="color: #aaca86;"&gt;js_language&lt;/span&gt; = &lt;span style="color: #ddbc91;"&gt;'javascript'&lt;/span&gt;
&lt;span style="color: #aaca86;"&gt;js_source_path&lt;/span&gt; = &lt;span style="color: #ddbc91;"&gt;'../src/'&lt;/span&gt;
&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;jsdoc_config_path = '../tsconfig.json'&lt;/span&gt;
&lt;span style="color: #aaca86;"&gt;primary_domain&lt;/span&gt; = &lt;span style="color: #ddbc91;"&gt;'js'&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
文档配置 api.rst：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-rst"&gt;&lt;span style="background-color: #262626;"&gt;API&lt;/span&gt;
&lt;span style="color: #91a0b3;"&gt;====&lt;/span&gt;

&lt;span style="color: #9fbfdf;"&gt;.. autofunction::&lt;/span&gt; parseInt
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
js 源文件 index.js：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-js"&gt;&lt;span style="color: #7c7565;"&gt;/** @function parseInt&lt;/span&gt;
&lt;span style="color: #7c7565;"&gt; * @param {string} string - value to parse&lt;/span&gt;
&lt;span style="color: #7c7565;"&gt; * @param {number} [radix] - integer between 2 and 36. Not default to 10 !!!&lt;/span&gt;
&lt;span style="color: #7c7565;"&gt; * @return {(number|NaN)} integer | NaN (radix &lt; 2 or radix &gt; 36 or first non-whitespace character cannot be converted to a number)&lt;/span&gt;
&lt;span style="color: #7c7565;"&gt; *&lt;/span&gt;
&lt;span style="color: #7c7565;"&gt; * @example&lt;/span&gt;
&lt;span style="color: #7c7565;"&gt; * parseInt('0xe', 16)&lt;/span&gt;
&lt;span style="color: #7c7565;"&gt; */&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
本地预览：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sphinx-autobuild content build
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org285dbc6" class="outline-2"&gt;
&lt;h2 id="org285dbc6"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 文件结构&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-txt"&gt;.
├── build
├── content
│  ├── _static
│  ├── api.rst
│  ├── conf.py
│  └── index.md
├── Makefile
├── requirements.txt
├── src
│  └── index.js
└── venv
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org295be03" class="outline-2"&gt;
&lt;h2 id="org295be03"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; GitHub Action 自动部署&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-yml"&gt;name: "Build Sphinx"

on:
  push:
    branches: [main]

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          npm install -g jsdoc
    - name: Clone deploy branch
      run: |
        REMOTE_BRANCH="${REMOTE_BRANCH:-gh-pages}"
        REMOTE_REPO="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"

        rm -rf build/html/
        mkdir -p build/html/
        git clone --depth=1 --branch="${REMOTE_BRANCH}" --single-branch --no-checkout \
          "${REMOTE_REPO}" build/html/
    - run: make html
    - name: Deploy to GitHub Pages
      if: "github.event_name == 'push'"
      run: |
        SOURCE_COMMIT="$(git log -1 --pretty="%an: %B" "$GITHUB_SHA")"
        pushd build/html/ &amp;&gt;/dev/null
        if [ "$(git status --porcelain | wc -l)" -eq 0 ]; then
          exit 0
        fi

        git add --all
        git -c user.name="${GITHUB_ACTOR}" -c user.email="${GITHUB_ACTOR}@users.noreply.github.com" \
          commit --quiet \
          --message "Deploy docs from ${GITHUB_SHA}" \
          --message "$SOURCE_COMMIT"
        git push

        popd &amp;&gt;/dev/null
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
&lt;a href="https://github.com/jsdoc/jsdoc"&gt;https://github.com/jsdoc/jsdoc&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
&lt;a href="https://github.com/mozilla/sphinx-js"&gt;https://github.com/mozilla/sphinx-js&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description></item>
<item><title>常用脚本</title><link>https://www.yidajiabei.xyz/blog/2022/common-scripts.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/common-scripts.html</guid><pubDate>Fri, 14 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;常用脚本&lt;/h1&gt;
&lt;/header&gt;
&lt;div id="outline-container-org55766ef" class="outline-2"&gt;
&lt;h2 id="org55766ef"&gt;批量删除 Pypi 包&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org55766ef"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;pip freeze | grep SOMETHING | xargs pip uninstall -y
&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;https://stackoverflow.com/a/9406259&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga3abaea" class="outline-2"&gt;
&lt;h2 id="orga3abaea"&gt;批量删除 Pacman 包&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga3abaea"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;sudo pacman -Rs $(pacman -Qq | grep some_words)
&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;https://bbs.archlinux.org/viewtopic.php?pid=1533162#p1533162&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item>
<item><title>GitHub Code Search 搜索语法</title><link>https://www.yidajiabei.xyz/blog/2022/github-code-search.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/github-code-search.html</guid><pubDate>Tue, 11 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;GitHub Code Search 搜索语法&lt;/h1&gt;
&lt;/header&gt;&lt;nav id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org494a53a"&gt;1. 基础查询结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org17a7e93"&gt;2. 精确查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgb1896b9"&gt;3. 仓库和组织限定词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgec390e8"&gt;4. 语言限定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2b71df6"&gt;5. 路径限定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdacc285"&gt;6. 扩展名限定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5dcc7f2"&gt;7. Symbol 限定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0ab95b5"&gt;8. Content 限定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/nav&gt;
&lt;p&gt;
&lt;a href="https://cs.github.com/about/syntax"&gt;https://cs.github.com/about/syntax&lt;/a&gt;
&lt;/p&gt;

&lt;div id="outline-container-org494a53a" class="outline-2"&gt;
&lt;h2 id="org494a53a"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 基础查询结构&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
一个关键词会匹配文件内容或文件路径。
&lt;/p&gt;

&lt;p&gt;
多个关键词会匹配文件内容，只要包含关键词，就会出现在搜索结果中，不论前后顺序，是否是一个单词（多个关键词之间没有空格）。
&lt;/p&gt;

&lt;p&gt;
还可以使用特定关键字（限定词）指定查询范围：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;repo:github/github&lt;/li&gt;
&lt;li&gt;org:github 或者 user:tj&lt;/li&gt;
&lt;li&gt;language:python&lt;/li&gt;
&lt;li&gt;path:README.md&lt;/li&gt;
&lt;li&gt;extension:js&lt;/li&gt;
&lt;li&gt;symbol:scanbytes&lt;/li&gt;
&lt;li&gt;content:querystats&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
还支持逻辑运算符：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;hello world &lt;=&gt; hello AND world&lt;/li&gt;
&lt;li&gt;hello OR world&lt;/li&gt;
&lt;li&gt;hello NOT world&lt;/li&gt;
&lt;li&gt;"fatal error" NOT path:__testing__&lt;/li&gt;
&lt;li&gt;(language:ruby OR language:python) AND NOT path:"&lt;i&gt;tests&lt;/i&gt;"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
还支持正则表达式，要用 // 包围：
&lt;/p&gt;

&lt;p&gt;
\/git.*push\/
&lt;/p&gt;

&lt;p&gt;
会查询所有文件中，git 后面有 push 的部分。git 与 push 之间可以有任意字符。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org17a7e93" class="outline-2"&gt;
&lt;h2 id="org17a7e93"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 精确查找&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
目标词组要用 "" 包裹 "abc def"。
&lt;/p&gt;

&lt;p&gt;
如果待搜索的字符串中有引号，可以用反斜杠转义 "name = \"Jim\""。
&lt;/p&gt;

&lt;p&gt;
也支持限定词 path:git language:"protocol buffers"。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb1896b9" class="outline-2"&gt;
&lt;h2 id="orgb1896b9"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 仓库和组织限定词&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
repo:github/linguist
&lt;/p&gt;

&lt;p&gt;
repo:torvalds/linux OR repo:git/git
&lt;/p&gt;

&lt;p&gt;
org:github &lt;=&gt; user:github
&lt;/p&gt;

&lt;p&gt;
目前（2022-01-11）还不支持对仓库名和组织名、用户名的正则表达式全部或部分匹配，所以搜索时，需要输入目标的全部 user[org]/reponame。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgec390e8" class="outline-2"&gt;
&lt;h2 id="orgec390e8"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 语言限定&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
language:ruby OR language:cpp OR language:csharp
&lt;/p&gt;

&lt;p&gt;
所有语言都在&lt;a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml"&gt;这里&lt;/a&gt;。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2b71df6" class="outline-2"&gt;
&lt;h2 id="org2b71df6"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; 路径限定&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
path:unit_tests
&lt;/p&gt;

&lt;p&gt;
它会查找所有路径中包含目标的部分。
&lt;/p&gt;

&lt;p&gt;
如果只想得到根路径下的内容，用正则表达式：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-text"&gt;path:/(^|\\/)/README\.md$/
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdacc285" class="outline-2"&gt;
&lt;h2 id="orgdacc285"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; 扩展名限定&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
extension:.js &lt;=&gt; extension:js
&lt;/p&gt;

&lt;p&gt;
extension:/[jt]s/
&lt;/p&gt;

&lt;p&gt;
查找扩展名为 js 或 ts 的文件。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5dcc7f2" class="outline-2"&gt;
&lt;h2 id="org5dcc7f2"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; Symbol 限定&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
language:go symbol:WithContext
&lt;/p&gt;

&lt;p&gt;
目前（2022-01-11）只能查找关于 Symbol 的定义，还没有支持所有 Symbol 或语言。关于语言支持 Symbol 搜索的情况可以看 &lt;a href="https://cs.github.com/about/faq#languages"&gt;FAQ&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
同样可以用正则表达式搜索：
&lt;/p&gt;

&lt;p&gt;
language:rust symbol:/^String::to_.*/
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0ab95b5" class="outline-2"&gt;
&lt;h2 id="org0ab95b5"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; Content 限定&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
如果只想搜索内容，不包括文件路径，可以这样
&lt;/p&gt;

&lt;p&gt;
content:README.md
&lt;/p&gt;

&lt;p&gt;
它只匹配文件内容中，含有 README.md 的部分。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item>
<item><title>技术遐想（一）</title><link>https://www.yidajiabei.xyz/blog/2022/tech-thought-1.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/tech-thought-1.html</guid><pubDate>Mon, 10 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;技术遐想（一）&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
从昨天开始，就决定手写一个 Cheatsheet 网站，仿照 &lt;a href="https://overapi.com/"&gt;OverAPI&lt;/a&gt;。起因是想找到一个页面，能够看到 JS 相关所有理论知识，一搜索就找到了它，很喜欢这种样式。于是仿写的想法就产生了。
&lt;/p&gt;

&lt;p&gt;
有三点需要记录下来：
&lt;/p&gt;

&lt;p&gt;
一、怎样形成适合自己的解决问题的方法论？
&lt;/p&gt;

&lt;p&gt;
最重要的一点：知道自己想要什么。比如说，我想知道怎样用 CSS 画一个正方形，我就会搜索“CSS square”，搜索结果就是答案。再比如，我想知道 JavaScript 的基础概念都有哪些，我试过直接搜索“JS basic concepts”，结果的确有哪些基础念，但这可能并非我真正需要的。
&lt;/p&gt;

&lt;p&gt;
我在解决问题的时候，并没有对问题的本质进行思考。就用上一段的两个例子来说，前者很明确，就是想用 CSS 画个正方形；后者却不那么具体，“基础概念”一词，每个人的理解都不一样，所以我找到的答案都是 &lt;b&gt;别人认为的基础概念&lt;/b&gt; 。刚开始学习一门语言的时候，我不知道哪些是基础概念，哪些只是需要了解，这个时候了解已经掌握这门语言的人，他们是怎样学习的，就很重要。之后再思考：掌握一门语言的关键在哪里（数据类型，函数）。
&lt;/p&gt;

&lt;p&gt;
遇到问题，怎样进行分析？
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;你要知道，这个问题是否真的是个问题。因为有时，我们会误以为这是个很困难的问题，直到解决了那一刻才意识到，原来这么容易就能解决。为什么我们没有在最开始就想到这一点？可能的原因就是，没有对问题的本质进行探讨。还是上文想知道 JS 基本概念的例子，其实我并不只是想知道 JS 的基本概念，我还想了解语言的整体，我要知道它有哪些部分构成，分别都起什么作用。这就是在 What 层面上的思考，即它是否是一个问题。&lt;/li&gt;
&lt;li&gt;How 层面。这个问题是怎样产生的？代码层面，能不能做一个最小 demo 把问题复现。&lt;/li&gt;
&lt;li&gt;Why 层面。问题出现了，为什么会在这里出现这样的问题，是否了解了足够多的背景信息？官方文档是否逐字句阅读过？&lt;/li&gt;
&lt;li&gt;还有其他需要思考之处：在解决问题的过程中，你能查阅哪些资料，我知道的有 MDN，GitHub，搜索引擎；你有没有找到更好的解决办法；为了不让自己重复解决相同或类似的问题，写成博客或是记笔记就是一个好办法；通过这次问题，学习到了哪些东西。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
致谢：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://github.com/lencx/z/discussions/79"&gt;解决问题方法论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://program-think.blogspot.com/2009/02/study-technology-in-three-steps.html"&gt;学习技术的三部曲：WHAT、HOW、WHY&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
二、给定一个颜色数组，如何让它和网页中的目标元素一一对应
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-js"&gt;&lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;rgbas&lt;/span&gt; = [
  &lt;span style="color: #ddbc91;"&gt;"rgba(251,34,240,0.25)"&lt;/span&gt;,
  &lt;span style="color: #ddbc91;"&gt;"rgba(214,17,21,0.25)"&lt;/span&gt;,
  &lt;span style="color: #ddbc91;"&gt;"rgba(14,251,252,0.25)"&lt;/span&gt;,
  &lt;span style="color: #ddbc91;"&gt;"rgba(158,134,255,0.25)"&lt;/span&gt;,
  &lt;span style="color: #ddbc91;"&gt;"rgba(60,255,20,0.25)"&lt;/span&gt;,
  &lt;span style="color: #ddbc91;"&gt;"rgba(44,158,52,0.25)"&lt;/span&gt;,
  &lt;span style="color: #ddbc91;"&gt;"rgba(225,211,20,0.25)"&lt;/span&gt;,
  &lt;span style="color: #ddbc91;"&gt;"rgba(100,117,121,0.25)"&lt;/span&gt;,
];
&lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;boards&lt;/span&gt; = document.getElementsByClassName(&lt;span style="color: #ddbc91;"&gt;"board"&lt;/span&gt;);

rgbas.forEach(() =&gt; {
  &lt;span style="color: #91a0b3;"&gt;for&lt;/span&gt; (&lt;span style="color: #91a0b3;"&gt;let&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;i&lt;/span&gt; = 0; i &lt; boards.length; i++) {
    boards[i].style.backgroundColor = rgbas[i];
  }
})
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;定义了颜色数组 rgbas[8]&lt;/li&gt;
&lt;li&gt;将第一个颜色分配给第一个 board 元素；第二个颜色分配给第二个 board 元素；以此类推&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
下面赋值的部分还有另一种写法：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-js"&gt;&lt;span style="color: #91a0b3;"&gt;for&lt;/span&gt; (&lt;span style="color: #91a0b3;"&gt;let&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;i&lt;/span&gt; = 0; i &lt; rgbas.length; i++) {
  &lt;span style="color: #91a0b3;"&gt;for&lt;/span&gt; (&lt;span style="color: #91a0b3;"&gt;let&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;j&lt;/span&gt; = 0; j &lt; boards.length; j++) {
    ...
  }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
最开始想出的代码是这个样子：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-js"&gt;&lt;span style="color: #91a0b3;"&gt;for&lt;/span&gt; (&lt;span style="color: #91a0b3;"&gt;let&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;j&lt;/span&gt; = 0; j &lt; rgbas.length; j++) {
  &lt;span style="color: #91a0b3;"&gt;for&lt;/span&gt; (&lt;span style="color: #91a0b3;"&gt;let&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;i&lt;/span&gt; = 0; i &lt; boards.length; i++) {
    boards[i].style.backgroundColor = rgbas[j];
  }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
想实现上述效果，但却发现：每一个 board 都有相同的背景色，思考一会儿才发现，如果这样写就会把颜色数组 rgbas 的最后一个颜色元素赋值给每一个 board。
&lt;/p&gt;

&lt;p&gt;
致谢：&lt;a href="https://50projects50days.com/js/main.js"&gt;main.js&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
三、怎样在多个页面应用相同的 HTML
&lt;/p&gt;

&lt;p&gt;
我接触到一个概念——Web Components。在制作网站时，在很多页面都会共用同一个 header 和 footer，Web Components 就是帮助我们复用这些共同代码的。
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;index.html&lt;/code&gt; ：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-html"&gt;&lt;&lt;span style="color: #91a0b3;"&gt;!DOCTYPE&lt;/span&gt; html&gt;
&lt;&lt;span style="color: #a9df90;"&gt;html&lt;/span&gt;&gt;
  &lt;&lt;span style="color: #a9df90;"&gt;head&lt;/span&gt;&gt;
    ...
    &lt;&lt;span style="color: #a9df90;"&gt;script&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;src&lt;/span&gt;=&lt;span style="color: #ddbc91;"&gt;"./components/header.js"&lt;/span&gt; defer&gt;&lt;/&lt;span style="color: #a9df90;"&gt;script&lt;/span&gt;&gt;
  &lt;/&lt;span style="color: #a9df90;"&gt;head&lt;/span&gt;&gt;
  &lt;&lt;span style="color: #a9df90;"&gt;body&lt;/span&gt;&gt;
    &lt;&lt;span style="color: #a9df90;"&gt;header-component&lt;/span&gt;&gt;&lt;/&lt;span style="color: #a9df90;"&gt;header-component&lt;/span&gt;&gt;
  &lt;/&lt;span style="color: #a9df90;"&gt;body&lt;/span&gt;&gt;
&lt;/&lt;span style="color: #a9df90;"&gt;html&lt;/span&gt;&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;./components/header.js&lt;/code&gt; ：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-js"&gt;&lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;headerTemplate&lt;/span&gt; = document.createElement(&lt;span style="color: #ddbc91;"&gt;"template"&lt;/span&gt;);

headerTemplate.innerHTML = &lt;span style="color: #ddbc91;"&gt;`&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;  &lt;style&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    header {&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      background: rgba(0, 0, 0, 0.6);&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      color: #999;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      width: 100%;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      z-index: 2;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      display: flex;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    }&lt;/span&gt;

&lt;span style="color: #ddbc91;"&gt;    header a {&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      text-decoration: none;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      color: #fff;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      outline: none;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    }&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    header a:visited {&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      color: #999;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    }&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    header a:hover {&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      color: #fff;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    }&lt;/span&gt;

&lt;span style="color: #ddbc91;"&gt;    header a#logo {&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      color: #fff;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      font-size: 18px;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      font-weight: bold;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      margin: 0;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      padding: 15px;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      text-align: center;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    }&lt;/span&gt;

&lt;span style="color: #ddbc91;"&gt;    header ul {&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      display: flex;&lt;/span&gt;

&lt;span style="color: #ddbc91;"&gt;    }&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    ul li {&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      margin-right: 5px;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      padding: 0 5px;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      list-style-type: none;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    }&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    ul li a {&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      display: block;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    }&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;  &lt;/style&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;  &lt;header&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    &lt;a href="/" id="logo"&gt;Home&lt;/a&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    &lt;ul&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      &lt;li&gt;&lt;a href="javascript.html"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      &lt;li&gt;&lt;a href="css.html"&gt;CSS&lt;/a&gt;&lt;/li&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      &lt;li&gt;&lt;a href="html.html"&gt;HTML&lt;/a&gt;&lt;/li&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;      &lt;li&gt;&lt;a href="developer-tools.html"&gt;Developer Tools&lt;/a&gt;&lt;/li&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;    &lt;/ul&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;  &lt;/header&gt;&lt;/span&gt;
&lt;span style="color: #ddbc91;"&gt;`&lt;/span&gt;;

&lt;span style="color: #91a0b3;"&gt;class&lt;/span&gt; Header &lt;span style="color: #91a0b3;"&gt;extends&lt;/span&gt; HTMLElement {
  constructor() {
    &lt;span style="color: #91a0b3;"&gt;super&lt;/span&gt;();
  }

  connectedCallback() {
    &lt;span style="color: #91a0b3;"&gt;const&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;shadowRoot&lt;/span&gt; = &lt;span style="color: #ab85a3;"&gt;this&lt;/span&gt;.attachShadow({ mode: &lt;span style="color: #ddbc91;"&gt;"closed"&lt;/span&gt; });

    shadowRoot.appendChild(headerTemplate.content);
  }
}

customElements.define(&lt;span style="color: #ddbc91;"&gt;"header-component"&lt;/span&gt;, Header);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
实现一个 Web Component 的一般步骤：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;对现有 Class 的功能进行扩展，创建自己的 Class&lt;/li&gt;
&lt;li&gt;使用 CustomElementRegistry.define() 方法注册你的自定义标签&lt;/li&gt;
&lt;li&gt;如果需要，附加 shadow DOM 到自定义元素中&lt;/li&gt;
&lt;li&gt;如果需要，使用 &lt;template&gt; 和 &lt;slot&gt; 定义 HTML 模板。再一次使用常规 DOM 方法克隆模板，并把它附加在你的 shadow DOM 下&lt;/li&gt;
&lt;li&gt;你可以在任何你需要的页面使用你的自定义标签&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
致谢：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;Web Components - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/reusable-html-components-how-to-reuse-a-header-and-footer-on-a-website/"&gt;Reusable HTML Components – How to Reuse a Header and Footer on a Website&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item>
<item><title>录音的合法性</title><link>https://www.yidajiabei.xyz/blog/2022/legality-of-recording.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/legality-of-recording.html</guid><pubDate>Sat, 08 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;录音的合法性&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
在维护自身权益时，可以录音，但哪种录音是法律认可的？
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;与对方当面或电话沟通过程中，偷偷录制双方沟通的过程取得的视听证据。一般认为属于合法所得，有效&lt;/li&gt;
&lt;li&gt;如果在他人居所、工作场所等放置录音设备，或者采取其他非法手段取得的视听证据，一般认为不属于合法取得，无效&lt;/li&gt;
&lt;li&gt;录音时，尽量录到关键因素，比如时间、双方身份、地点，关于重要事实和待确认的事实最好也在录音中予以确认&lt;/li&gt;
&lt;li&gt;一定要保留录音的原始载体，不能擅自剪辑、截取；如果经过剪辑/截取，通常是无效的&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item>
<item><title>酒精致癌</title><link>https://www.yidajiabei.xyz/blog/2022/refuse-to-drink.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/refuse-to-drink.html</guid><pubDate>Sat, 08 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;酒精致癌&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
&lt;a href="https://mp.weixin.qq.com/s/ALO5v2bQ-P2ABlXtb-PBHw"&gt;https://mp.weixin.qq.com/s/ALO5v2bQ-P2ABlXtb-PBHw&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
国际癌症研究机构（IARC）、美国临床肿瘤学会（ASCO）等权威机构都明确指出：酒精（饮料）是重要的致癌因素。
&lt;/p&gt;

&lt;p&gt;
世界卫生组织下属的国际癌症研究机构（IARC），早已把酒精（饮料）列为 1 类致癌物。
&lt;/p&gt;

&lt;p&gt;
饮酒和常见的乳腺癌、结直肠癌、肝癌、食管癌、胃癌和胰腺癌等都有直接关系。当然，和酒关系最密切的癌症类型，来自喝酒会直接接触的组织——如口腔癌，喉癌，食管癌等。
&lt;/p&gt;

&lt;p&gt;
此外，女性尤其不应该喝酒，因为酒精给女性带来的风险看起来比男性更大。数据显示，在美国有 16.4% 的女性乳腺癌与饮酒有关。
&lt;/p&gt;

&lt;p&gt;
如果出于防癌或防病的角度，适量饮酒绝对不是好的建议，更有效更简单的方法永远是——不喝酒。
&lt;/p&gt;

&lt;p&gt;
事实上酒本身不会引起基因突变，不会直接致癌，真正危险的是酒精在人体内的代谢产物：乙醛。
&lt;/p&gt;

&lt;p&gt;
酒精（乙醇）进入体内后，由乙醇脱氢酶代谢为乙醛，然后再由乙醛脱氢酶代谢为乙酸排出体外。
&lt;/p&gt;

&lt;p&gt;
乙醇就是酒精，是喝酒「爽」的来源，导致错觉喝醉是因为它，酒驾醉驾查的也是它；乙酸可以理解为「醋」，没啥毒副作用。
&lt;/p&gt;

&lt;p&gt;
但是，中间代谢产物乙醛，是明确的致癌物。正因如此，世界卫生组织才把含酒精的饮料和乙醛同时列为证据最确凿的 I 类致癌物。
&lt;/p&gt;

&lt;p&gt;
为什么说中国人喝酒更容易致癌呢？因为中国人有酒精代谢基因的缺陷。
&lt;/p&gt;

&lt;p&gt;
喝酒上脸这件事儿是中国（东亚人）特色，喝酒后的外国人并不像中国人那么容易脸红。
&lt;/p&gt;

&lt;p&gt;
而喝酒脸红的根本原因，是中国人多携带有突变的乙醛脱氢酶基因，导致人体无法有效降解乙醛。乙醛在体内积累后能导致血管舒张，看起来就是脸红筋涨，形成「喝酒上脸」的现象。
&lt;/p&gt;

&lt;p&gt;
一些对东亚人群的研究发现，乙醛脱氢酶基因缺陷的人喝酒后，患癌概率会大于没有缺陷的人。&lt;/p&gt;
&lt;/div&gt;</description></item>
<item><title>自动发布 Org Mode</title><link>https://www.yidajiabei.xyz/blog/2022/org-mode-publish-with-crontab.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/org-mode-publish-with-crontab.html</guid><pubDate>Sat, 08 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;自动发布 Org Mode&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
使用了 crontab。
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;crontab -e
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
通过默认编辑器打开一个空白文件，输入：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-text"&gt;@hourly ~/org/publish.sh &gt;&gt; /home/$USER/cron.log 2&gt;&amp;1
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
这行文本的作用：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;每个小时（整点，如 1 点，2 点……）会执行后面紧跟着的 shell 脚本，要确保脚本可执行（ &lt;code&gt;chmod +x ~/org/publish.sh&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;日志输出到 &lt;code&gt;/home/$USER/cron.log&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;code&gt;~/org/publish.sh&lt;/code&gt; 内容：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="color: #ddbc91;"&gt;\\&lt;/span&gt;#!/bin/bash &lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;&#35813;&#34892;&#22312;&#23454;&#38469;&#20351;&#29992;&#26102;&#65292;&#21482;&#26377; #!/bin/bash&lt;/span&gt;
&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;&#22914;&#26524;&#19981;&#21152;\\&#65292;&#23548;&#20986;&#30340; html &#25991;&#20214;&#20013;&#26080;&#27861;&#26174;&#31034;#&lt;/span&gt;

&lt;span style="color: #706565;"&gt;# &lt;/span&gt;&lt;span style="color: #857575;"&gt;&#22914;&#26524;&#27809;&#26377;&#19979;&#38754;&#36825;&#19968;&#34892;&#65292;&#23601;&#19981;&#33021;&#36890;&#36807; publickey push &#21040;&#36828;&#31243;&#20179;&#24211;&lt;/span&gt;
&lt;span style="color: #9fbfdf;"&gt;export&lt;/span&gt; &lt;span style="color: #aaca86;"&gt;GIT_SSH_COMMAND&lt;/span&gt;=&lt;span style="color: #ddbc91;"&gt;"ssh -i /home/$USER/.ssh/private_key"&lt;/span&gt;
&lt;span style="color: #9fbfdf;"&gt;cd&lt;/span&gt; ~/repo/blog/
make publish
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如上述代码中注释所说，通过 cronie 自动化程序，似乎没办法读取到当前用户的私匙，这可能是为了安全。
&lt;/p&gt;

&lt;p&gt;
我直接添加环境变量的解决办法会不会导致安全问题呢？
&lt;/p&gt;

&lt;p&gt;
致谢：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://chai-bapat.medium.com/how-to-automate-github-using-cron-16effc825bcf"&gt;How to automate Github using Cron?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git#Documentation/git.txt-codeGITSSHCOMMANDcode"&gt;GIT_SSH_COMMAND - git Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item>
<item><title>谨慎对待合同协议</title><link>https://www.yidajiabei.xyz/blog/2022/contract-agreement.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/contract-agreement.html</guid><pubDate>Sat, 08 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;谨慎对待合同协议&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
&lt;a href="https://mp.weixin.qq.com/s/6RvxZRd8alo2KH8eItOMZA"&gt;https://mp.weixin.qq.com/s/6RvxZRd8alo2KH8eItOMZA&lt;/a&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;仔细阅读合同书，不论是入职、还是租房买房&lt;/li&gt;
&lt;li&gt;合同一式两份，对方一份，自己一份&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item>
<item><title>熬夜增加猝死风险</title><link>https://www.yidajiabei.xyz/blog/2022/stay-up-late-lead-to-die.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/stay-up-late-lead-to-die.html</guid><pubDate>Sat, 08 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;熬夜增加猝死风险&lt;/h1&gt;
&lt;/header&gt;&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/WKK69D8F3JBndqSlaH80jA"&gt;https://mp.weixin.qq.com/s/WKK69D8F3JBndqSlaH80jA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rdcu.be/cEyPq"&gt;https://rdcu.be/cEyPq&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
原因不明的猝死（sudden unexplained death，SUD）。研究者推测，SUD 多数是因为突发心律失常引起的。
&lt;/p&gt;

&lt;p&gt;
白天人类处于频繁活动状态，心脏中的心肌细胞的钠、钾离子浓度是一种状态；到了夜间，进化经验让心脏知道，人体不会进行白天似的频繁活动，也就通过改变离子浓度达到睡眠状态。
&lt;/p&gt;

&lt;p&gt;
但是，现代生活让人们到了晚上也不休息。大脑处于兴奋状态，发送信号让心脏持续供应能量，心脏只能违背固有节律，降低钠钾的调节幅度，这可能会使心脏的昼夜节律失调。
&lt;/p&gt;

&lt;p&gt;
分子生物学博士 John O' Neill 谈到，当心肌细胞的生物钟和来自大脑的刺激不同步时，心血管系统可能无法应对正常生活工作中的压力，从而增加因不良生活习惯导致患病死亡的风险。
&lt;/p&gt;

&lt;p&gt;
包括人类在内，生命体都有一个生物钟，让个体适应昼夜变换。如果这种节律被破坏，身体就可能出现问题。
&lt;/p&gt;

&lt;p&gt;
昼夜节律紊乱（熬夜）可能的影响：
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;胃肠道溃疡、神经系统疾病&lt;/li&gt;
&lt;li&gt;改变人的行为，如使进食节律变化，导致摄入过多热量，引起肥胖、糖尿病、高血压等相关疾病&lt;/li&gt;
&lt;li&gt;熬夜几乎能增加所有类型癌症的发生风险&lt;/li&gt;
&lt;li&gt;睡眠时间提前一个小时，重症抑郁的患病风险就降低了 23%&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item>
<item><title>学习粉墙</title><link>https://www.yidajiabei.xyz/blog/2022/physical-labour.html</link><guid isPermaLink="true">https://www.yidajiabei.xyz/blog/2022/physical-labour.html</guid><pubDate>Wed, 05 Jan 2022 08:00:00 CST</pubDate><description type="html">&lt;div id="content"&gt;
&lt;header&gt;
&lt;h1 class="title"&gt;学习粉墙&lt;/h1&gt;
&lt;/header&gt;&lt;p&gt;
今天是帮助父亲干活儿的第三天，干完活就没有精力继续学习了，因为特别累，无法集中注意力。
&lt;/p&gt;

&lt;p&gt;
干的活属于室内装修，方言称「刮大白」，就是在墙上涂上白色涂料。手拿着板状工具，从已经搅拌好涂料的桶中，撅出一块来，放到墙上，再用工具顺平，要求是平整，没有突出凹陷。
&lt;/p&gt;

&lt;p&gt;
我干这个已经四年了，每年寒假都会帮着父亲干一些。前几年干的时候，还不知道怎么用劲儿，手还不够灵活，刮出来的墙面总是深浅不一。和父亲的刮出来的差距甚远。今天父亲手把手又教我一次，发现自己已经掌握一些技巧了——刚开始学习的时候以快为主，先在面前手臂可及的范围内将涂料抹满，再刮去突出的部分，使得墙面平整。
&lt;/p&gt;

&lt;p&gt;
父亲对我很严厉，我干活很慢，这是长久以来已经养成的习惯。所以，父亲唠叨很多，我又害怕他打我，也就更加小心翼翼。我被父亲打怕了，干活的时候会想象不知道哪一刻，头会被敲一下、屁股会挨上一脚。
&lt;/p&gt;

&lt;p&gt;
我很着急，因为找工作需要的知识还没学习完毕。所以，我不想干活，它对我来说是一份煎熬。但是，我换一种角度看待它。
&lt;/p&gt;

&lt;p&gt;
粉墙不是我所喜欢的，但这是我必须完成的，因为为了生活必须做到，如果不干就没有饭吃。况且，在找工作的时候，就算我真的找到前端工程师工作，工作内容就一定是我所喜欢的吗？如果不是，我是不是就要辞职另找一份呢？
&lt;/p&gt;

&lt;p&gt;
不是的，即便工作内容并不为我喜欢，我也要尽职尽责，把我应该做的，以及可以做的都做到。工作就是创造价值，无论是为了自己还是为了别人。
&lt;/p&gt;

&lt;p&gt;
刮大白和做前端都是反馈及时的事情，前者一眼就能看到，后者根据输出可以看到。这样的好处是可以很快地发现问题并解决。&lt;/p&gt;
&lt;/div&gt;</description></item>
</channel>
</rss>